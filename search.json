[{"path":"/DEVELOPMENT.html","id":"setting-up-the-development-environment","dir":"","previous_headings":"","what":"Setting up the development environment","title":"NA","text":"","code":"install.packages(c('devtools', 'pkgdown', 'styler', 'lintr')) # install dev dependencies devtools::install_deps(dependencies = TRUE) # install package dependencies devtools::document() # generate package meta data and man files devtools::build() # build package"},{"path":"/DEVELOPMENT.html","id":"validating-the-package","dir":"","previous_headings":"","what":"Validating the package","title":"NA","text":"","code":"styler::style_pkg() # format code lintr::lint_package() # lint code  devtools::test() # test package devtools::check() # check package for errors"},{"path":"/DEVELOPMENT.html","id":"developing-the-documentation-site","dir":"","previous_headings":"","what":"Developing the documentation site","title":"NA","text":"CI builds two version documentation: https://cmu-delphi.github.io/epidatr/ main branch https://cmu-delphi.github.io/epidatr/dev dev branch. documentation site can previewed locally running R: open browser, can try using Python server command line:","code":"# Should automatically open a browser pkgdown::build_site(preview=TRUE) R -e 'devtools::document()' R -e 'pkgdown::build_site()' python -m http.server -d docs"},{"path":"/DEVELOPMENT.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"NA","text":"Please follow guidelines PR template document.","code":""},{"path":"/DEVELOPMENT.html","id":"release-process","dir":"","previous_headings":"","what":"Release process","title":"NA","text":"First, ’s handy function makes github issue; example, time writing : want extend , add release_bullets function utils.R. First, make sure checks pass Aim 10/10, notes. Generally, follow issue. revdep_check likely fail doesn’t seem terribly important. now ignore . gone smoothly enough, release CRAN via","code":"usethis::use_release_issue(version = \"1.0.2\") devtools::check(\".\", manual = TRUE, env_vars =c(NOT_CRAN = \"false\")) devtools::release(check = TRUE)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 epidatr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/epidatr.html","id":"installation","dir":"Articles","previous_headings":"Setup","what":"Installation","title":"Get started with epidatr","text":"can install stable version package CRAN: want development version, install GitHub:","code":"install.packages(\"epidatr\") pak::pkg_install(\"epidatr\") renv::install(\"epidatr\") # Install the dev version using `pak` or `remotes` pak::pkg_install(\"cmu-delphi/epidatr@dev\") remotes::install_github(\"cmu-delphi/epidatr\", ref = \"dev\") renv::install(\"cmu-delphi/epidatr@dev\")"},{"path":"/articles/epidatr.html","id":"api-keys","dir":"Articles","previous_headings":"Setup","what":"API Keys","title":"Get started with epidatr","text":"Delphi API requires (free) API key full functionality. endpoints available without one, limits API usage anonymous users, including rate limit. generate key, register pseudo-anonymous account. See save_api_key() function documentation details set epidatr use API key. Note private endpoints (.e. prefixed pvt_) require separate key needs passed argument. endpoints require specific data use agreements access.","code":""},{"path":"/articles/epidatr.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"Get started with epidatr","text":"Fetching data Delphi Epidata API simple. Suppose interested covidcast endpoint, provides access wide range data COVID-19. Reviewing endpoint documentation, see need specify data source name, signal name, geographic level, time resolution, location times interest. pub_covidcast() function lets us access covidcast endpoint: pub_covidcast() returns tibble. (’re using knitr::kable() make readable.) row represents one observation Pennsylvania one day. state abbreviation given geo_value column, date time_value column. value requested signal – case, smoothed estimate percentage people COVID-like illness, based symptom surveys, stderr standard error. Epidata API makes signals available different geographic levels, depending endpoint. request signals states instead entire US, use geo_type argument paired * geo_values argument. (endpoints allow use * access data locations. Check help given endpoint see supports *.) can fetch subset states listing desired locations: can also request data single location time, via geo_values argument.","code":"library(epidatr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # Obtain the most up-to-date version of the smoothed covid-like illness (CLI) # signal from the COVID-19 Trends and Impact survey for the US epidata <- pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_cli\",   geo_type = \"nation\",   time_type = \"day\",   geo_values = \"us\",   time_values = epirange(20210105, 20210410) ) knitr::kable(head(epidata)) # Obtain the most up-to-date version of the smoothed covid-like illness (CLI) # signal from the COVID-19 Trends and Impact survey for all states pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_cli\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"*\",   time_values = epirange(20210105, 20210410) ) # Obtain the most up-to-date version of the smoothed covid-like illness (CLI) # signal from the COVID-19 Trends and Impact survey for Pennsylvania pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_cli\",   geo_type = \"state\",   time_type = \"day\",   geo_values = c(\"pa\", \"ca\", \"fl\"),   time_values = epirange(20210105, 20210410) ) # Obtain the most up-to-date version of the smoothed covid-like illness (CLI) # signal from the COVID-19 Trends and Impact survey for Pennsylvania epidata <- pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_cli\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"pa\",   time_values = epirange(20210105, 20210410) ) knitr::kable(head(epidata))"},{"path":"/articles/epidatr.html","id":"getting-versioned-data","dir":"Articles","previous_headings":"","what":"Getting versioned data","title":"Get started with epidatr","text":"Epidata API stores historical record data, including corrections updates, particularly useful accurately backtesting forecasting models. fetch versioned data, can use as_of argument. See vignette(\"versioned-data\") details ways specify versioned data.","code":"# Obtain the smoothed covid-like illness (CLI) signal from the COVID-19 # Trends and Impact survey for Pennsylvania as it was on 2021-06-01 pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_cli\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"pa\",   time_values = epirange(20210105, 20210410),   as_of = \"2021-06-01\" )"},{"path":"/articles/epidatr.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Get started with epidatr","text":"output data standard tibble format, can easily plot using ggplot2:  ggplot2 can also used create choropleths.","code":"library(ggplot2) ggplot(epidata, aes(x = time_value, y = value)) +   geom_line() +   labs(     title = \"Smoothed CLI from Facebook Survey\",     subtitle = \"PA, 2021\",     x = \"Date\",     y = \"CLI\"   ) library(maps)  # Obtain the most up-to-date version of the smoothed covid-like illness (CLI) # signal from the COVID-19 Trends and Impact survey for all states on a single day cli_states <- pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_cli\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"*\",   time_values = 20210410 )  # Get a mapping of states to longitude/latitude coordinates states_map <- map_data(\"state\")  # Convert state abbreviations into state names cli_states <- mutate(   cli_states,   state = ifelse(     geo_value == \"dc\",     \"district of columbia\",     state.name[match(geo_value, tolower(state.abb))] %>% tolower()   ) )  # Add coordinates for each state cli_states <- left_join(states_map, cli_states, by = c(\"region\" = \"state\"))  # Plot ggplot(cli_states, aes(x = long, y = lat, group = group, fill = value)) +   geom_polygon(colour = \"black\", linewidth = 0.2) +   coord_map(\"polyconic\") +   labs(     title = \"Smoothed CLI from Facebook Survey\",     subtitle = \"All states, 2021-04-10\",     x = \"Longitude\",     y = \"Latitude\"   )"},{"path":"/articles/epidatr.html","id":"finding-locations-of-interest","dir":"Articles","previous_headings":"","what":"Finding locations of interest","title":"Get started with epidatr","text":"data available US. Select endpoints report countries national /regional levels. Endpoint descriptions explicitly state cover non-US locations. endpoints report US data, see geographic coding documentation available geographic levels.","code":""},{"path":"/articles/epidatr.html","id":"international-data","dir":"Articles","previous_headings":"Finding locations of interest","what":"International data","title":"Get started with epidatr","text":"International data available via pub_dengue_nowcast (North South America) pub_ecdc_ili (Europe) pub_kcdc_ili (Korea) pub_nidss_dengue (Taiwan) pub_nidss_flu (Taiwan) pub_paho_dengue (North South America) pvt_dengue_sensors (North South America)","code":""},{"path":"/articles/epidatr.html","id":"finding-data-sources-and-signals-of-interest","dir":"Articles","previous_headings":"","what":"Finding data sources and signals of interest","title":"Get started with epidatr","text":"used data Delphi’s symptom surveys, Epidata API includes numerous data streams: medical claims data, cases deaths, mobility, many others. can make challenge find data stream interested . Epidata documentation lists data sources signals available API COVID-19 diseases. can also use avail_endpoints() function get table endpoint functions: See vignette(\"signal-discovery\") information.","code":"avail_endpoints() #> ℹ Data is available for the US only, unless otherwise specified"},{"path":"/articles/signal-discovery.html","id":"using-the-documentation","dir":"Articles","previous_headings":"","what":"Using the documentation","title":"Finding data sources and signals of interest","text":"Epidata documentation lists data sources signals available API COVID-19 diseases. site also includes search tool keyword (e.g. “Taiwan”) mind.","code":""},{"path":"/articles/signal-discovery.html","id":"signal-metadata","dir":"Articles","previous_headings":"","what":"Signal metadata","title":"Finding data sources and signals of interest","text":"endpoints partner metadata available provides information signals available, example, time ranges available , updated.","code":""},{"path":"/articles/signal-discovery.html","id":"interactive-tooling","dir":"Articles","previous_headings":"","what":"Interactive tooling","title":"Finding data sources and signals of interest","text":"provide couple epidatr functions help find data sources signals. avail_endpoints() function lists endpoints, , except COVIDcast, corresponds single data source. avail_endpoints() outputs tibble endpoints brief descriptions, explicitly state cover non-US locations: covidcast_epidata() function lets look -depth data sources available COVIDcast endpoint. function describes available data sources signals: source included entry covid_sources$sources list, associated tibble describing included signals. use editor supports tab completion, RStudio, type covid_sources$source$ wait tab completion popup. able browse list data sources. use editor supports tab completion, type covid_sources$signals$ wait tab completion popup. able type name signals autocomplete feature select list . tab-completion popup, signal names prefixed name data source filtering convenience. Note signal names dashes , access rely backtick operator: signal objects can used directly fetch data, without requiring us use pub_covidcast() function. Simply use $call attribute object:","code":"avail_endpoints() covid_sources <- covidcast_epidata() head(covid_sources$sources, n = 2) #> $chng #> [1] \"Change Healthcare\" #> [1] \"chng\" #> [1] \"Change Healthcare is a healthcare technology company that aggregates medical claims data from many healthcare providers. This source includes aggregated counts of claims with confirmed COVID-19 or COVID-related symptoms. All claims data has been de-identified in accordance with HIPAA privacy regulations. \" #> # A tibble: 6 × 2 #>   signal                        short_description                                #>   <chr>                         <chr>                                            #> 1 smoothed_outpatient_cli       Estimated percentage of outpatient doctor visit… #> 2 smoothed_adj_outpatient_cli   Estimated percentage of outpatient doctor visit… #> 3 smoothed_outpatient_covid     COVID-Confirmed Doctor Visits                    #> 4 smoothed_adj_outpatient_covid COVID-Confirmed Doctor Visits                    #> # ℹ 2 more rows #>  #> $`covid-act-now` #> [1] \"Covid Act Now (CAN)\" #> [1] \"covid-act-now\" #> [1] \"COVID Act Now (CAN) tracks COVID-19 testing statistics, such as positivity rates and total tests performed. This source only includes CAN data from the CDC's COVID-19 Integrated County View.\" #> # A tibble: 2 × 2 #>   signal                       short_description                                 #>   <chr>                        <chr>                                             #> 1 pcr_specimen_positivity_rate Proportion of PCR specimens tested that have a p… #> 2 pcr_specimen_total_tests     Total number of PCR specimens tested covid_sources$signals #> # A tibble: 443 × 3 #>   source signal                        short_description                         #>   <chr>  <chr>                         <chr>                                     #> 1 chng   smoothed_outpatient_cli       Estimated percentage of outpatient docto… #> 2 chng   smoothed_adj_outpatient_cli   Estimated percentage of outpatient docto… #> 3 chng   smoothed_outpatient_covid     COVID-Confirmed Doctor Visits             #> 4 chng   smoothed_adj_outpatient_covid COVID-Confirmed Doctor Visits             #> # ℹ 439 more rows covid_sources$signals$`fb-survey:smoothed_cli` #> [1] \"COVID-Like Symptoms (Unweighted 7-day average)\" #> [1] \"fb-survey:smoothed_cli\" #> [1] \"Estimated percentage of people with COVID-like illness \" epidata <- covid_sources$signals$`fb-survey:smoothed_cli`$call(   \"state\", \"pa\", epirange(20210405, 20210410) ) knitr::kable(epidata)"},{"path":[]},{"path":"/articles/signal-discovery.html","id":"covidcast-main-endpoint","dir":"Articles","previous_headings":"Example Queries","what":"COVIDcast Main Endpoint","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html County geo_values FIPS codes discussed API docs . example Orange County, California. covidcast endpoint supports * time geo fields:","code":"pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_accept_covid_vaccine\",   geo_type = \"county\",   time_type = \"day\",   time_values = epirange(20201221, 20201225),   geo_values = \"06059\" ) #> # A tibble: 5 × 15 #>   geo_value signal     source geo_type time_type time_value direction issue      #>   <chr>     <chr>      <chr>  <fct>    <fct>     <date>         <dbl> <date>     #> 1 06059     smoothed_… fb-su… county   day       2020-12-21        NA 2020-12-22 #> 2 06059     smoothed_… fb-su… county   day       2020-12-22        NA 2020-12-23 #> 3 06059     smoothed_… fb-su… county   day       2020-12-23        NA 2020-12-24 #> 4 06059     smoothed_… fb-su… county   day       2020-12-24        NA 2020-12-25 #> # ℹ 1 more row #> # ℹ 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>, #> #   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl> pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_accept_covid_vaccine\",   geo_type = \"county\",   time_type = \"day\",   time_values = epirange(20201221, 20201225),   geo_values = \"*\" ) #> # A tibble: 2,025 × 15 #>   geo_value signal     source geo_type time_type time_value direction issue      #>   <chr>     <chr>      <chr>  <fct>    <fct>     <date>         <dbl> <date>     #> 1 01000     smoothed_… fb-su… county   day       2020-12-21        NA 2020-12-22 #> 2 01073     smoothed_… fb-su… county   day       2020-12-21        NA 2020-12-22 #> 3 01089     smoothed_… fb-su… county   day       2020-12-21        NA 2020-12-22 #> 4 01097     smoothed_… fb-su… county   day       2020-12-21        NA 2020-12-22 #> # ℹ 2,021 more rows #> # ℹ 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>, #> #   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl>"},{"path":[]},{"path":"/articles/signal-discovery.html","id":"covid-19-hospitalization-facility-lookup","dir":"Articles","previous_headings":"Example Queries > Other Covid Endpoints","what":"COVID-19 Hospitalization: Facility Lookup","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility_lookup.html","code":"pub_covid_hosp_facility_lookup(city = \"southlake\") pub_covid_hosp_facility_lookup(state = \"WY\") # A non-example (there is no city called New York in Wyoming) pub_covid_hosp_facility_lookup(state = \"WY\", city = \"New York\")"},{"path":"/articles/signal-discovery.html","id":"covid-19-hospitalization-by-facility","dir":"Articles","previous_headings":"Example Queries > Other Covid Endpoints","what":"COVID-19 Hospitalization by Facility","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility.html","code":"pub_covid_hosp_facility(   hospital_pks = \"100075\",   collection_weeks = epirange(20200101, 20200501) )"},{"path":"/articles/signal-discovery.html","id":"covid-19-hospitalization-by-state","dir":"Articles","previous_headings":"Example Queries > Other Covid Endpoints","what":"COVID-19 Hospitalization by State","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp.html","code":"pub_covid_hosp_state_timeseries(states = \"MA\", dates = \"20200510\")"},{"path":[]},{"path":"/articles/signal-discovery.html","id":"delphis-ilinet-forecasts","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"Delphi’s ILINet forecasts","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/delphi.html","code":"del <- pub_delphi(system = \"ec\", epiweek = 201501) names(del[[1L]]$forecast)"},{"path":"/articles/signal-discovery.html","id":"flusurv-hospitalization-data","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"FluSurv hospitalization data","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/flusurv.html","code":"pub_flusurv(locations = \"ca\", epiweeks = 202001)"},{"path":"/articles/signal-discovery.html","id":"fluview-data","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"Fluview data","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/fluview.html","code":"pub_fluview(regions = \"nat\", epiweeks = epirange(201201, 202001))"},{"path":"/articles/signal-discovery.html","id":"fluview-virological-data-from-clinical-labs","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"Fluview virological data from clinical labs","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/fluview_clinical.html","code":"pub_fluview_clinical(regions = \"nat\", epiweeks = epirange(201601, 201701))"},{"path":"/articles/signal-discovery.html","id":"fluview-metadata","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"Fluview metadata","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/fluview_meta.html","code":"pub_fluview_meta()"},{"path":"/articles/signal-discovery.html","id":"google-flu-trends-data","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"Google Flu Trends data","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/gft.html","code":"pub_gft(locations = \"hhs1\", epiweeks = epirange(201201, 202001))"},{"path":"/articles/signal-discovery.html","id":"ecdc-ili","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"ECDC ILI","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/ecdc_ili.html","code":"pub_ecdc_ili(regions = \"Armenia\", epiweeks = 201840)"},{"path":"/articles/signal-discovery.html","id":"kcdc-ili","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"KCDC ILI","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/kcdc_ili.html","code":"pub_kcdc_ili(regions = \"ROK\", epiweeks = 200436)"},{"path":"/articles/signal-discovery.html","id":"nidss-flu","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"NIDSS Flu","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/nidss_flu.html","code":"pub_nidss_flu(regions = \"taipei\", epiweeks = epirange(200901, 201301))"},{"path":"/articles/signal-discovery.html","id":"ili-nearby-nowcast","dir":"Articles","previous_headings":"Example Queries > Flu Endpoints","what":"ILI Nearby Nowcast","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/nowcast.html","code":"pub_nowcast(locations = \"ca\", epiweeks = epirange(202201, 202319))"},{"path":[]},{"path":"/articles/signal-discovery.html","id":"delphis-dengue-nowcast","dir":"Articles","previous_headings":"Example Queries > Dengue Endpoints","what":"Delphi’s Dengue Nowcast","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/dengue_nowcast.html","code":"pub_dengue_nowcast(locations = \"pr\", epiweeks = epirange(201401, 202301))"},{"path":"/articles/signal-discovery.html","id":"nidss-dengue","dir":"Articles","previous_headings":"Example Queries > Dengue Endpoints","what":"NIDSS dengue","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/nidss_dengue.html","code":"pub_nidss_dengue(locations = \"taipei\", epiweeks = epirange(200301, 201301))"},{"path":"/articles/signal-discovery.html","id":"paho-dengue","dir":"Articles","previous_headings":"Example Queries","what":"PAHO Dengue","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/paho_dengue.html","code":"pub_paho_dengue(regions = \"ca\", epiweeks = epirange(200201, 202319))"},{"path":[]},{"path":"/articles/signal-discovery.html","id":"wikipedia-access","dir":"Articles","previous_headings":"Example Queries > Other Endpoints","what":"Wikipedia Access","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/wiki.html","code":"pub_wiki(   language = \"en\",   articles = \"influenza\",   time_type = \"week\",   time_values = epirange(202001, 202319) )"},{"path":"/articles/signal-discovery.html","id":"private-methods","dir":"Articles","previous_headings":"Example Queries","what":"Private methods","title":"Finding data sources and signals of interest","text":"require private access keys use (separate Delphi Epidata API key). actually run locally, need store secrets .Reviron file, set environmental variables.","code":""},{"path":"/articles/signal-discovery.html","id":"cdc","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"CDC","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/cdc.html","code":"pvt_cdc(auth = Sys.getenv(\"SECRET_API_AUTH_CDC\"), epiweeks = epirange(202003, 202304), locations = \"ma\")"},{"path":"/articles/signal-discovery.html","id":"dengue-digital-surveillance-sensors","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"Dengue Digital Surveillance Sensors","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/dengue_sensors.html","code":"pvt_dengue_sensors(   auth = Sys.getenv(\"SECRET_API_AUTH_SENSORS\"),   names = \"ght\",   locations = \"ag\",   epiweeks = epirange(201404, 202004) )"},{"path":"/articles/signal-discovery.html","id":"google-health-trends","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"Google Health Trends","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/ght.html","code":"pvt_ght(   auth = Sys.getenv(\"SECRET_API_AUTH_GHT\"),   epiweeks = epirange(199301, 202304),   locations = \"ma\",   query = \"how to get over the flu\" )"},{"path":"/articles/signal-discovery.html","id":"norostat-metadata","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"NoroSTAT metadata","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/meta_norostat.html","code":"pvt_meta_norostat(auth = Sys.getenv(\"SECRET_API_AUTH_NOROSTAT\"))"},{"path":"/articles/signal-discovery.html","id":"norostat-data","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"NoroSTAT data","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/norostat.html","code":"pvt_norostat(auth = Sys.getenv(\"SECRET_API_AUTH_NOROSTAT\"), locations = \"1\", epiweeks = 201233)"},{"path":"/articles/signal-discovery.html","id":"quidel-influenza-testing","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"Quidel Influenza testing","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/quidel.html","code":"pvt_quidel(auth = Sys.getenv(\"SECRET_API_AUTH_QUIDEL\"), locations = \"hhs1\", epiweeks = epirange(200301, 202105))"},{"path":"/articles/signal-discovery.html","id":"sensors","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"Sensors","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/sensors.html","code":"pvt_sensors(   auth = Sys.getenv(\"SECRET_API_AUTH_SENSORS\"),   names = \"sar3\",   locations = \"nat\",   epiweeks = epirange(200301, 202105) )"},{"path":"/articles/signal-discovery.html","id":"twitter","dir":"Articles","previous_headings":"Example Queries > Private methods","what":"Twitter","title":"Finding data sources and signals of interest","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/twitter.html","code":"pvt_twitter(   auth = Sys.getenv(\"SECRET_API_AUTH_TWITTER\"),   locations = \"nat\",   time_type = \"week\",   time_values = epirange(200301, 202105) )"},{"path":"/articles/versioned-data.html","id":"data-known-as-of-a-specific-date","dir":"Articles","previous_headings":"","what":"Data known “as of” a specific date","title":"Understanding and accessing versioned data","text":"default, endpoint functions fetch recent issue available. best option users simply want graph latest data construct dashboards. interested knowing data reported, can request specific data versions using as_of, issues, lag arguments. Note mutually exclusive; one can specified time. Also, endpoints support three parameters, please check documentation specific endpoint. First, can request data available specific date, using as_of argument: shows estimate 2.3% issued May 7. don’t specify as_of, get recent estimate available: Note substantial change estimate, less 3% almost 6%, reflecting new data became available May 7 visits occurring May 1. illustrates importance issue date tracking, particularly forecasting tasks. backtest forecasting model past data, important use data available time model fit, data arrived much later.","code":"epidata <- pub_covidcast(   source = \"doctor-visits\",   signals = \"smoothed_adj_cli\",   time_type = \"day\",   time_values = epirange(\"2020-05-01\", \"2020-05-01\"),   geo_type = \"state\",   geo_values = \"pa\",   as_of = \"2020-05-07\" ) knitr::kable(epidata) epidata <- pub_covidcast(   source = \"doctor-visits\",   signals = \"smoothed_adj_cli\",   time_type = \"day\",   time_values = epirange(\"2020-05-01\", \"2020-05-01\"),   geo_type = \"state\",   geo_values = \"pa\" ) knitr::kable(epidata)"},{"path":"/articles/versioned-data.html","id":"multiple-issues-of-observations","dir":"Articles","previous_headings":"","what":"Multiple issues of observations","title":"Understanding and accessing versioned data","text":"using issues argument, can request issues certain time period: estimate clearly updated many times new data May 1st arrived. Note results include data issued updated (inclusive) 2020-05-01 2020-05-15. value first reported 2020-04-15, never updated, query issues 2020-05-01 2020-05-15 include value among results. issues parameter also accepts list dates.","code":"epidata <- pub_covidcast(   source = \"doctor-visits\",   signals = \"smoothed_adj_cli\",   time_type = \"day\",   time_values = epirange(\"2020-05-01\", \"2020-05-01\"),   geo_type = \"state\",   geo_values = \"pa\",   issues = epirange(\"2020-05-01\", \"2020-05-15\") ) knitr::kable(epidata) pub_covidcast(   source = \"doctor-visits\",   signals = \"smoothed_adj_cli\",   time_type = \"day\",   time_values = epirange(\"2020-05-01\", \"2020-05-01\"),   geo_type = \"state\",   geo_values = \"pa\",   issues = c(\"2020-05-07\", \"2020-05-09\", \"2020-05-15\") )"},{"path":"/articles/versioned-data.html","id":"observations-issued-with-a-specific-lag","dir":"Articles","previous_headings":"","what":"Observations issued with a specific lag","title":"Understanding and accessing versioned data","text":"Finally, can use lag argument request data reported certain lag. example, requesting lag 7 days fetches data issued exactly 7 days corresponding time_value: Note though query requested values 2020-05-01 2020-05-07, May 3rd May 4th included results set. query include result May 3rd value issued May 10th (7-day lag), fact value updated day:","code":"epidata <- pub_covidcast(   source = \"doctor-visits\",   signals = \"smoothed_adj_cli\",   time_type = \"day\",   time_values = epirange(\"2020-05-01\", \"2020-05-07\"),   geo_type = \"state\",   geo_values = \"pa\",   lag = 7 ) knitr::kable(epidata) epidata <- pub_covidcast(   source = \"doctor-visits\",   signals = \"smoothed_adj_cli\",   time_type = \"day\",   time_values = epirange(\"2020-05-03\", \"2020-05-03\"),   geo_type = \"state\",   geo_values = \"pa\",   issues = epirange(\"2020-05-09\", \"2020-05-15\") ) knitr::kable(epidata)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Logan Brooks. Author. Dmitry Shemetov. Author. Samuel Gratzl. Author. David Weber. Contributor, maintainer. Alex Reinhart. Contributor. Daniel McDonald. Contributor. Kean Ming Tan. Contributor. Townes. Contributor. George Haff. Contributor. Kathryn Mazaitis. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Farrow DC, Brooks LC, Rumack , Tibshirani RJ, Rosenfeld R (2015). “Delphi Epidata API.” https://github.com/cmu-delphi/delphi-epidata.","code":"@Misc{,   title = {Delphi Epidata API},   author = {David C. Farrow and Logan C. Brooks and Aaron Rumack and Ryan J. Tibshirani and Roni Rosenfeld},   year = {2015},   url = {https://github.com/cmu-delphi/delphi-epidata}, }"},{"path":"/index.html","id":"delphi-epidata-r-client","dir":"","previous_headings":"","what":"Client for Delphis Epidata' API","title":"Client for Delphis Epidata' API","text":"Delphi Epidata API provides real-time access epidemiological surveillance data influenza, COVID-19, diseases official government sources Centers Disease Control Prevention (CDC), private partners Facebook (now Meta) Change Healthcare, public datasets like Google Trends. built maintained Carnegie Mellon University Delphi Research Group. package designed streamline downloading usage data Delphi Epidata API. provides simple R interface API, including functions downloading data, parsing results, converting data tidy format. API stores historical record data, including corrections updates, particularly useful accurately backtesting forecasting models. also provide packages downstream data processing (epiprocess) modeling (epipredict).","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Client for Delphis Epidata' API","text":"","code":"library(epidatr) # Obtain the smoothed covid-like illness (CLI) signal from Delphi's US COVID-19 # Trends and Impact Survey (CTIS), in partnership with Facebook, as it was on # April 10, 2021 for the US at the national level epidata <- pub_covidcast(   source = \"fb-survey\",   signals = \"smoothed_cli\",   geo_type = \"nation\",   time_type = \"day\",   geo_values = \"us\",   time_values = epirange(20210101, 20210601),   as_of = 20210601 ) epidata #> # A tibble: 151 × 15 #>    geo_value signal    source geo_type time_type time_value direction issue      #>    <chr>     <chr>     <chr>  <fct>    <fct>     <date>         <dbl> <date>     #>  1 us        smoothed… fb-su… nation   day       2021-01-01        NA 2021-01-06 #>  2 us        smoothed… fb-su… nation   day       2021-01-02        NA 2021-01-07 #>  3 us        smoothed… fb-su… nation   day       2021-01-03        NA 2021-01-08 #>  4 us        smoothed… fb-su… nation   day       2021-01-04        NA 2021-01-09 #>  5 us        smoothed… fb-su… nation   day       2021-01-05        NA 2021-01-10 #>  6 us        smoothed… fb-su… nation   day       2021-01-06        NA 2021-01-29 #>  7 us        smoothed… fb-su… nation   day       2021-01-07        NA 2021-01-29 #>  8 us        smoothed… fb-su… nation   day       2021-01-08        NA 2021-01-29 #>  9 us        smoothed… fb-su… nation   day       2021-01-09        NA 2021-01-29 #> 10 us        smoothed… fb-su… nation   day       2021-01-10        NA 2021-01-29 #> # ℹ 141 more rows #> # ℹ 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>, #> #   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl>"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Client for Delphis Epidata' API","text":"Installing package straightforward.","code":"# Install the CRAN version pak::pkg_install(\"epidatr\") # Install the development version from the GitHub dev branch pak::pkg_install(\"cmu-delphi/epidatr@dev\")"},{"path":"/index.html","id":"api-keys","dir":"","previous_headings":"Installation","what":"API Keys","title":"Client for Delphis Epidata' API","text":"Delphi API requires (free) API key full functionality. generate key, register pseudo-anonymous account see discussion general API website. epidatr client automatically look key environment variable DELPHI_EPIDATA_KEY. recommend storing key .Renviron file, R read default. Note time , private endpoints (.e. prefixed pvt) require separate key needs passed argument.","code":""},{"path":"/index.html","id":"for-users-of-the-covidcast-r-package","dir":"","previous_headings":"","what":"For users of the covidcast R package","title":"Client for Delphis Epidata' API","text":"covidcast package deprecated longer updated. epidatr package complete rewrite covidcast package, focus speed, reliability, ease use. also supports endpoints data sources covidcast. migrating package, need use pub_covidcast function epidatr.","code":""},{"path":"/index.html","id":"get-updates","dir":"","previous_headings":"","what":"Get updates","title":"Client for Delphis Epidata' API","text":"consider subscribing API mailing list notified package updates, new data sources, corrections, updates.","code":""},{"path":"/index.html","id":"usage-terms-and-citation","dir":"","previous_headings":"","what":"Usage terms and citation","title":"Client for Delphis Epidata' API","text":"request use epidatr package work, use data provided Delphi Epidata API non-covidcast endpoints, cite us using citation given citation(\"epidatr\"). use data covidcast endpoint, please use COVIDcast citation well. See COVIDcast licensing documentation licensing documentation endpoints information citing datasets provided API. Warning: use data Epidata API power product, dashboard, app, service, please download data need store centrally rather making API requests every user. server resources limited support high-volume interactive use. See also Terms Use, noting data research product warranted particular purpose.","code":""},{"path":"/pull_request_template.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"Please: Make sure PR “dev”, “main” (unless release PR). Request review one current epidatr main reviewers: brookslogan, dshemetov, nmdefries, dsweber2. Makes sure bump version number DESCRIPTION. Always increment patch version number (third number), unless making release PR dev main, case increment minor version number (second number). Describe changes made NEWS.md, making sure breaking changes (backwards-incompatible changes documented interface) noted. Collect changes next release number (e.g. 1.7.2, write changes 1.8 heading).","code":""},{"path":[]},{"path":"/pull_request_template.html","id":"magic-github-syntax-to-mark-associated-issues-as-resolved-when-this-is-merged-into-the-default-branch","dir":"","previous_headings":"","what":"Magic GitHub syntax to mark associated Issue(s) as resolved when this is merged into the default branch","title":"NA","text":"Resolves #{issue number}","code":""},{"path":"/reference/assert_character_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows character vectors — assert_character_param","title":"Allows character vectors — assert_character_param","text":"Allows character vectors","code":""},{"path":"/reference/assert_character_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows character vectors — assert_character_param","text":"","code":"assert_character_param(name, value, len = NULL, required = TRUE)"},{"path":"/reference/assert_date_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows a vector of date_like params: date, character, or integer-like — assert_date_param","title":"Allows a vector of date_like params: date, character, or integer-like — assert_date_param","text":"Allows vector date_like params: date, character, integer-like","code":""},{"path":"/reference/assert_date_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows a vector of date_like params: date, character, or integer-like — assert_date_param","text":"","code":"assert_date_param(name, value, len = NULL, required = TRUE)"},{"path":"/reference/assert_integerish_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows integer-like vectors — assert_integerish_param","title":"Allows integer-like vectors — assert_integerish_param","text":"Allows integer-like vectors","code":""},{"path":"/reference/assert_integerish_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows integer-like vectors — assert_integerish_param","text":"","code":"assert_integerish_param(name, value, len = NULL, required = TRUE)"},{"path":"/reference/assert_timeset_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Allows a timeset param: a date vector, a character vector, an integer-like\nvector, or a single EpiRange — assert_timeset_param","title":"Allows a timeset param: a date vector, a character vector, an integer-like\nvector, or a single EpiRange — assert_timeset_param","text":"Allows timeset param: date vector, character vector, integer-like vector, single EpiRange","code":""},{"path":"/reference/assert_timeset_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allows a timeset param: a date vector, a character vector, an integer-like\nvector, or a single EpiRange — assert_timeset_param","text":"","code":"assert_timeset_param(name, value, len = NULL, required = TRUE)"},{"path":"/reference/avail_endpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available Epidata API endpoints — avail_endpoints","title":"List all available Epidata API endpoints — avail_endpoints","text":"Fetches data frame Epidata API endpoints can accessed using package, brief description.","code":""},{"path":"/reference/avail_endpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available Epidata API endpoints — avail_endpoints","text":"","code":"avail_endpoints()"},{"path":"/reference/avail_endpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available Epidata API endpoints — avail_endpoints","text":"tibble::tibble endpoints, two columns: Endpoint Name function accessing API endpoint. Description One-sentence description data available endpoint.","code":""},{"path":"/reference/avail_endpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all available Epidata API endpoints — avail_endpoints","text":"","code":"avail_endpoints() #> ℹ Data is available for the US only, unless otherwise specified #> # A tibble: 28 × 2 #>    Endpoint                          Description                                 #>    <chr>                             <chr>                                       #>  1 pub_covid_hosp_facility()         COVID hospitalizations by facility          #>  2 pub_covid_hosp_facility_lookup()  Helper for finding COVID hospitalization f… #>  3 pub_covid_hosp_state_timeseries() COVID hospitalizations by state             #>  4 pub_covidcast()                   Various COVID and flu signals via the COVI… #>  5 pub_covidcast_meta()              Metadata for the COVIDcast endpoint         #>  6 pub_delphi()                      Delphi's ILINet outpatient doctor visits f… #>  7 pub_dengue_nowcast()              Delphi's PAHO dengue nowcasts (North and S… #>  8 pub_ecdc_ili()                    ECDC ILI incidence (Europe)                 #>  9 pub_flusurv()                     CDC FluSurv flu hospitalizations            #> 10 pub_fluview()                     CDC FluView ILINet outpatient doctor visits #> 11 pub_fluview_clinical()            CDC FluView flu tests from clinical labs    #> 12 pub_fluview_meta()                Metadata for the FluView endpoint           #> 13 pub_gft()                         Google Flu Trends flu search volume         #> 14 pub_kcdc_ili()                    KCDC ILI incidence (Korea)                  #> 15 pub_meta()                        Metadata for the Delphi Epidata API         #> 16 pub_nidss_dengue()                NIDSS dengue cases (Taiwan)                 #> 17 pub_nidss_flu()                   NIDSS flu doctor visits (Taiwan)            #> 18 pub_nowcast()                     Delphi's ILI Nearby nowcasts                #> 19 pub_paho_dengue()                 PAHO dengue data (North and South America)  #> 20 pub_wiki()                        Wikipedia webpage counts by article         #> 21 pvt_cdc()                         CDC total and by topic webpage visits       #> 22 pvt_dengue_sensors()              PAHO dengue digital surveillance sensors (… #> 23 pvt_ght()                         Google Health Trends health topics search … #> 24 pvt_meta_norostat()               Metadata for the NoroSTAT endpoint          #> 25 pvt_norostat()                    CDC NoroSTAT norovirus outbreaks            #> 26 pvt_quidel()                      Quidel COVID-19 and influenza testing data  #> 27 pvt_sensors()                     Influenza and dengue digital surveillance … #> 28 pvt_twitter()                     HealthTweets total and influenza-related t…"},{"path":"/reference/cache_epidata_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispatch caching — cache_epidata_call","title":"Dispatch caching — cache_epidata_call","text":"guts caching, interposed fetch specific fetch methods. Internal method .","code":""},{"path":"/reference/cache_epidata_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispatch caching — cache_epidata_call","text":"","code":"cache_epidata_call(epidata_call, fetch_args = fetch_args_list())"},{"path":"/reference/cache_epidata_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispatch caching — cache_epidata_call","text":"epidata_call epidata_call object fetch_args args list fetch generated fetch_args_list()","code":""},{"path":"/reference/cache_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Describe current cache — cache_info","title":"Describe current cache — cache_info","text":"Print information cache (returned cachem's info() method).","code":""},{"path":"/reference/cache_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Describe current cache — cache_info","text":"","code":"cache_info()"},{"path":"/reference/cache_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Describe current cache — cache_info","text":"list containing info result created cachem","code":""},{"path":[]},{"path":"/reference/check_is_cachable.html","id":null,"dir":"Reference","previous_headings":"","what":"helper that checks whether a call is actually cachable — check_is_cachable","title":"helper that checks whether a call is actually cachable — check_is_cachable","text":"helper checks whether call actually cachable","code":""},{"path":"/reference/check_is_cachable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper that checks whether a call is actually cachable — check_is_cachable","text":"","code":"check_is_cachable(epidata_call, fetch_args)"},{"path":"/reference/check_is_recent.html","id":null,"dir":"Reference","previous_headings":"","what":"helper that checks whether a call is a somewhat dangerous cache — check_is_recent","title":"helper that checks whether a call is a somewhat dangerous cache — check_is_recent","text":"helper checks whether call somewhat dangerous cache","code":""},{"path":"/reference/check_is_recent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper that checks whether a call is a somewhat dangerous cache — check_is_recent","text":"","code":"check_is_recent(dates, max_age)"},{"path":"/reference/clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually reset the cache, deleting all currently saved data and starting afresh — clear_cache","title":"Manually reset the cache, deleting all currently saved data and starting afresh — clear_cache","text":"Deletes current cache resets new cache. Deletes local data! using session unique cache, pass arguments used set_cache earlier, otherwise system-wide .Renviron-based defaults used.","code":""},{"path":"/reference/clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually reset the cache, deleting all currently saved data and starting afresh — clear_cache","text":"","code":"clear_cache(..., disable = FALSE)"},{"path":"/reference/clear_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manually reset the cache, deleting all currently saved data and starting afresh — clear_cache","text":"... Arguments passed set_cache cache_dir directory cache stored. default, rappdirs::user_cache_dir(\"R\", version = \"epidatr\"). path can either relative absolute. environmental variable EPIDATR_CACHE_DIR. days maximum length time days keep particular cached call. default 1. environmental variable EPIDATR_CACHE_MAX_AGE_DAYS. max_size size entire cache, MB, start pruning entries. default 1024, 1GB. environmental variable EPIDATR_CACHE_MAX_SIZE_MB. logfile cachem's log transactions stored, relative cache directory. default, \"logfile.txt\". environmental variable EPIDATR_CACHE_LOGFILE. confirm whether confirm directory creation. default TRUE; set non-interactive scripts startup indicates whether function called startup. Affects suppressability messages. Default FALSE. disable instead setting new cache, disable caching entirely; defaults FALSE","code":""},{"path":"/reference/clear_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manually reset the cache, deleting all currently saved data and starting afresh — clear_cache","text":"NULL return value, effects stored package environment","code":""},{"path":[]},{"path":"/reference/covidcast_epidata.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates the COVIDcast Epidata autocomplete helper — covidcast_epidata","title":"Creates the COVIDcast Epidata autocomplete helper — covidcast_epidata","text":"Creates helper object can use auto-complete help find COVIDcast sources signals. COVIDcast endpoint Epidata API contains many separate data sources signals. can difficult find name signal looking , can use covidcast_epidata get help finding sources functions without leaving R. covidcast_epidata() function fetches list signals, returns object containing fields every signal:   use editor supports tab completion, RStudio, type epidata$signals$ wait tab completion popup. able type name signals autocomplete feature select list . Note signal names dashes , access rely backtick operator:   objects can used directly fetch data, without requiring us use pub_covidcast() function. Simply use $call attribute object:","code":"epidata <- covidcast_epidata() epidata$signals #> # A tibble: 443 x 3 #>    source        signal                        short_description                 #>    <chr>         <chr>                         <chr>                             #>  1 chng          smoothed_outpatient_cli       Estimated percentage of outpatie~ #>  2 chng          smoothed_adj_outpatient_cli   Estimated percentage of outpatie~ #>  3 chng          smoothed_outpatient_covid     COVID-Confirmed Doctor Visits     #>  4 chng          smoothed_adj_outpatient_covid COVID-Confirmed Doctor Visits     #>  5 chng          smoothed_outpatient_flu       Estimated percentage of outpatie~ #>  6 chng          smoothed_adj_outpatient_flu   Estimated percentage of outpatie~ #>  7 covid-act-now pcr_specimen_positivity_rate  Proportion of PCR specimens test~ #>  8 covid-act-now pcr_specimen_total_tests      Total number of PCR specimens te~ #>  9 doctor-visits smoothed_cli                  Percentage of daily doctor visit~ #> 10 doctor-visits smoothed_adj_cli              Percentage of daily doctor visit~ #> # i 433 more rows epidata$signals$`fb-survey:smoothed_cli` #> [1] \"COVID-Like Symptoms (Unweighted 7-day average)\" #> [1] \"fb-survey:smoothed_cli\" #> [1] \"Estimated percentage of people with COVID-like illness \" epidata$signals$`fb-survey:smoothed_cli`$call(\"state\", \"pa\",                                               epirange(20210405, 20210410)) #> # A tibble: 6 x 15 #>   geo_value signal     source geo_type time_type time_value direction issue      #>   <chr>     <chr>      <chr>  <fct>    <fct>     <date>         <dbl> <date>     #> 1 pa        smoothed_~ fb-su~ state    day       2021-04-05        NA 2021-04-10 #> 2 pa        smoothed_~ fb-su~ state    day       2021-04-06        NA 2021-04-11 #> 3 pa        smoothed_~ fb-su~ state    day       2021-04-07        NA 2021-04-12 #> 4 pa        smoothed_~ fb-su~ state    day       2021-04-08        NA 2021-04-13 #> 5 pa        smoothed_~ fb-su~ state    day       2021-04-09        NA 2021-04-14 #> 6 pa        smoothed_~ fb-su~ state    day       2021-04-10        NA 2021-04-15 #> # i 7 more variables: lag <dbl>, missing_value <dbl>, missing_stderr <dbl>, #> #   missing_sample_size <dbl>, value <dbl>, stderr <dbl>, sample_size <dbl>"},{"path":"/reference/covidcast_epidata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates the COVIDcast Epidata autocomplete helper — covidcast_epidata","text":"","code":"covidcast_epidata(base_url = global_base_url, timeout_seconds = 30)"},{"path":"/reference/covidcast_epidata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates the COVIDcast Epidata autocomplete helper — covidcast_epidata","text":"base_url optional alternative API base url timeout_seconds maximum amount time wait response","code":""},{"path":"/reference/covidcast_epidata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates the COVIDcast Epidata autocomplete helper — covidcast_epidata","text":"instance covidcast_epidata","code":""},{"path":"/reference/date_to_epiweek.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a date (integer or character) to an epiweek — date_to_epiweek","title":"Converts a date (integer or character) to an epiweek — date_to_epiweek","text":"Converts date (integer character) epiweek","code":""},{"path":"/reference/date_to_epiweek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a date (integer or character) to an epiweek — date_to_epiweek","text":"","code":"date_to_epiweek(value)"},{"path":"/reference/date_to_epiweek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a date (integer or character) to an epiweek — date_to_epiweek","text":"value date (integer character, format YYYYMMDD) converted epiweek","code":""},{"path":"/reference/date_to_epiweek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a date (integer or character) to an epiweek — date_to_epiweek","text":"integer representing epiweek, format YYYYWW","code":""},{"path":"/reference/disable_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn off the caching for this session — disable_cache","title":"Turn off the caching for this session — disable_cache","text":"Disable caching call set_cache restart R. files defining cache untouched. looking disable caching permanently, set EPIDATR_USE_CACHE=FALSE environmental variable .Renviron.","code":""},{"path":"/reference/disable_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn off the caching for this session — disable_cache","text":"","code":"disable_cache()"},{"path":"/reference/disable_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn off the caching for this session — disable_cache","text":"NULL return value, effects stored package environment","code":""},{"path":[]},{"path":"/reference/do_request.html","id":null,"dir":"Reference","previous_headings":"","what":"performs the request — do_request","title":"performs the request — do_request","text":"can test authentication headers like :","code":""},{"path":"/reference/do_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"performs the request — do_request","text":"","code":"do_request(url, params, timeout_seconds)"},{"path":"/reference/do_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"performs the request — do_request","text":"","code":"if (FALSE) { response <- httr::RETRY(   \"GET\", \"https://httpbin.org/headers\",   httr::authenticate(\"epidata\", \"fake_key\") ) content(response)$headers$Authorization == paste0(   \"Basic \",   base64enc::base64encode(charToRaw(\"epidata:fake_key\")) ) }"},{"path":"/reference/epidata_call.html","id":null,"dir":"Reference","previous_headings":"","what":"An abstraction that holds information needed to make an epidata request — create_epidata_call","title":"An abstraction that holds information needed to make an epidata request — create_epidata_call","text":"epidata_call objects generated internally endpoint functions like pub_covidcast; default, piped directly fetch function fetch format data. endpoints return tibble, non-COVIDCAST endpoints return JSON-like list instead.","code":""},{"path":"/reference/epidata_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An abstraction that holds information needed to make an epidata request — create_epidata_call","text":"","code":"create_epidata_call(   endpoint,   params,   meta = NULL,   only_supports_classic = FALSE )  fetch(epidata_call, fetch_args = fetch_args_list())"},{"path":"/reference/epidata_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An abstraction that holds information needed to make an epidata request — create_epidata_call","text":"endpoint epidata endpoint call params parameters pass epidata endpoint meta meta data attach epidata call only_supports_classic true classic format supported epidata_call instance epidata_call fetch_args fetch_args object","code":""},{"path":"/reference/epidata_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An abstraction that holds information needed to make an epidata request — create_epidata_call","text":"create_epidata_call: epidata_call object fetch: tibble JSON-like list","code":""},{"path":"/reference/epidata_call.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An abstraction that holds information needed to make an epidata request — create_epidata_call","text":"create_epidata_call constructor epidata_call objects, need use directly; instead, use endpoint function, e.g., pub_covidcast, generate epidata_call data interest. functions available debugging advanced usage: - request_url (debugging):  outputs request URL data fetched (note additional parameters ) fetch usually returns data tibble format, endpoints support JSON classic format (pub_delphi, pvt_meta_norostat, pub_meta). case JSON-like nested list structure returned instead.","code":""},{"path":"/reference/epidata_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An abstraction that holds information needed to make an epidata request — create_epidata_call","text":"","code":"if (FALSE) { call <- pub_covidcast(   source = \"jhu-csse\",   signals = \"confirmed_7dav_incidence_prop\",   time_type = \"day\",   geo_type = \"state\",   time_values = epirange(20200601, 20200801),   geo_values = c(\"ca\", \"fl\"),   fetch_args = fetch_args_list(dry_run = TRUE) ) call %>% fetch() }"},{"path":"/reference/epidatr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"epidatr: Client for Delphi's 'Epidata' API — epidatr-package","title":"epidatr: Client for Delphi's 'Epidata' API — epidatr-package","text":"Delphi 'Epidata' API provides real-time access epidemiological surveillance data influenza, 'COVID-19', diseases USA various geographical resolutions, official government sources Center Disease Control (CDC) Google Trends private partners Facebook Change 'Healthcare'. built maintained Carnegie Mellon University Delphi research group. cite API: David C. Farrow, Logan C. Brooks, Aaron 'Rumack', Ryan J. 'Tibshirani', 'Roni' 'Rosenfeld' (2015). Delphi 'Epidata' API. https://github.com/cmu-delphi/delphi-epidata.","code":""},{"path":"/reference/epidatr-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"epidatr: Client for Delphi's 'Epidata' API — epidatr-package","text":"delphi.epidata.key option specifies API key used making requests Epidata API.","code":""},{"path":[]},{"path":"/reference/epidatr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"epidatr: Client for Delphi's 'Epidata' API — epidatr-package","text":"Maintainer: David Weber davidweb@andrew.cmu.edu [contributor] Authors: Logan Brooks lcbrooks@andrew.cmu.edu Dmitry Shemetov dshemeto@andrew.cmu.edu Samuel Gratzl sam@sgratzl.com contributors: Alex Reinhart [contributor] Daniel McDonald [contributor] Kean Ming Tan [contributor] Townes [contributor] George Haff [contributor] Kathryn Mazaitis [contributor]","code":""},{"path":"/reference/epirange.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a range of days or weeks for API requests — epirange","title":"Specify a range of days or weeks for API requests — epirange","text":"Specify date range (days epiweeks) API request.","code":""},{"path":"/reference/epirange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a range of days or weeks for API requests — epirange","text":"","code":"epirange(from, to)"},{"path":"/reference/epirange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a range of days or weeks for API requests — epirange","text":"first date request. Can specified Date integer integer-like string format YYYYMMDD dates YYYYWW epiweeks. final date request (inclusive), specified way .","code":""},{"path":"/reference/epirange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a range of days or weeks for API requests — epirange","text":"EpiRange object.","code":""},{"path":"/reference/epirange.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify a range of days or weeks for API requests — epirange","text":"Epiweeks, also known MMWR weeks number weeks year 1 53, week spanning Sunday Saturday. numbering defined CDC.","code":""},{"path":"/reference/epirange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a range of days or weeks for API requests — epirange","text":"","code":"# Represents 2021-01-01 to 2021-01-07, inclusive epirange(20210101, 20210107) #>  #> ── <EpiRange> object: ────────────────────────────────────────────────────────── #> Days from 2021-01-01 to 2021-01-07  # The same, but using Date objects epirange(as.Date(\"2021-01-01\"), as.Date(\"2021-01-07\")) #>  #> ── <EpiRange> object: ────────────────────────────────────────────────────────── #> Days from 2021-01-01 to 2021-01-07  # Represents epiweeks 2 through 4 of 2022, inclusive epirange(202202, 202204) #>  #> ── <EpiRange> object: ────────────────────────────────────────────────────────── #> Epiweeks from 2022w02 to 2022w04"},{"path":"/reference/fetch_args_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Set custom API request parameters — fetch_args_list","title":"Set custom API request parameters — fetch_args_list","text":"Used specify custom options making API requests, set timeouts change data formats. options used fetch() makes calls Epidata API.","code":""},{"path":"/reference/fetch_args_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set custom API request parameters — fetch_args_list","text":"","code":"fetch_args_list(   ...,   fields = NULL,   disable_date_parsing = FALSE,   disable_data_frame_parsing = FALSE,   return_empty = FALSE,   timeout_seconds = 15 * 60,   base_url = NULL,   dry_run = FALSE,   debug = FALSE,   format_type = c(\"json\", \"classic\", \"csv\") )"},{"path":"/reference/fetch_args_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set custom API request parameters — fetch_args_list","text":"... used values, forces later arguments bind name fields list epidata fields return, NULL return fields (default). e.g. c(\"time_value\", \"value\") return time_value value fields c(\"-direction\") return everything except direction field disable_date_parsing disable automatic date parsing disable_data_frame_parsing disable automatic conversion data frame; supported endpoints support 'classic' format (non-tabular) return_empty boolean allows returning empty tibble data timeout_seconds maximum amount time (seconds) wait response API server base_url base URL use; default NULL, means global base URL \"https://api.delphi.cmu.edu/epidata/\" dry_run TRUE, skip call API instead return epidata_call object (useful debugging) debug TRUE, return raw response API format_type format request API, one classic, json, csv; used fetch_debug, default \"json\"","code":""},{"path":"/reference/fetch_args_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set custom API request parameters — fetch_args_list","text":"fetch_args object containing specified options","code":""},{"path":"/reference/fetch_classic.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches the data, raises on epidata errors, and returns the results as a\nJSON-like list — fetch_classic","title":"Fetches the data, raises on epidata errors, and returns the results as a\nJSON-like list — fetch_classic","text":"Fetches data, raises epidata errors, returns results JSON-like list","code":""},{"path":"/reference/fetch_classic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches the data, raises on epidata errors, and returns the results as a\nJSON-like list — fetch_classic","text":"","code":"fetch_classic(epidata_call, fetch_args = fetch_args_list())"},{"path":"/reference/fetch_classic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches the data, raises on epidata errors, and returns the results as a\nJSON-like list — fetch_classic","text":"epidata_call instance epidata_call fetch_args fetch_args object","code":""},{"path":"/reference/fetch_classic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches the data, raises on epidata errors, and returns the results as a\nJSON-like list — fetch_classic","text":"fetch_classic: JSON-like list","code":""},{"path":"/reference/fetch_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches the data and returns a tibble — fetch_tbl","title":"Fetches the data and returns a tibble — fetch_tbl","text":"Fetches data returns tibble","code":""},{"path":"/reference/fetch_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches the data and returns a tibble — fetch_tbl","text":"","code":"fetch_tbl(epidata_call, fetch_args = fetch_args_list())"},{"path":"/reference/fetch_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches the data and returns a tibble — fetch_tbl","text":"epidata_call instance epidata_call fetch_args fetch_args object","code":""},{"path":"/reference/fetch_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches the data and returns a tibble — fetch_tbl","text":"fetch_tbl: tibble::tibble","code":""},{"path":"/reference/format_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to cast values, non-list vectors, and/or EpiRanges to strings — format_item","title":"Helper function to cast values, non-list vectors, and/or EpiRanges to strings — format_item","text":"Helper function cast values, non-list vectors, /EpiRanges strings","code":""},{"path":"/reference/format_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to cast values, non-list vectors, and/or EpiRanges to strings — format_item","text":"","code":"format_item(value)"},{"path":"/reference/format_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to build a list of values and/or ranges — format_list","title":"Helper function to build a list of values and/or ranges — format_list","text":"Helper function build list values /ranges","code":""},{"path":"/reference/format_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to build a list of values and/or ranges — format_list","text":"","code":"format_list(values)"},{"path":"/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set API keys — get_api_key","title":"Get and set API keys — get_api_key","text":"Get set API key used make requests Epidata API. Without key, requests may subject rate limits limitations.","code":""},{"path":"/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set API keys — get_api_key","text":"","code":"get_api_key()  save_api_key()"},{"path":"/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set API keys — get_api_key","text":"get_api_key(), returns current API key string, \"\" none set.","code":""},{"path":"/reference/get_api_key.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get and set API keys — get_api_key","text":"recommend register API key. endpoints available without one, limits API usage anonymous users, including rate limit. regularly request large amounts data, please consider registering API key. API keys strings read environment variable DELPHI_EPIDATA_KEY. recommend setting key save_api_key(), modify applicable .Renviron file, read automatically start future R sessions (see ?Startup details .Renviron files). Alternatively, can modify environment variable command line /launching R, inside R session Sys.setenv(), persist across sessions. API key set, automatically used requests made functions package.","code":""},{"path":"/reference/get_api_key.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get and set API keys — get_api_key","text":"Delphi Epidata API Keys documentation. Delphi Epidata API Registration Form.","code":""},{"path":"/reference/get_wildcard_equivalent_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"helper to convert a date wildcard (","title":"helper to convert a date wildcard (","text":"helper convert date wildcard (\"*\") appropriate epirange","code":""},{"path":"/reference/get_wildcard_equivalent_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper to convert a date wildcard (","text":"","code":"get_wildcard_equivalent_dates(time_value, time_type = c(\"day\", \"week\"))"},{"path":"/reference/parse_api_week.html","id":null,"dir":"Reference","previous_headings":"","what":"parse_api_week converts an integer to a date — parse_api_week","title":"parse_api_week converts an integer to a date — parse_api_week","text":"parse_api_week converts integer date","code":""},{"path":"/reference/parse_api_week.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parse_api_week converts an integer to a date — parse_api_week","text":"","code":"parse_api_week(value)"},{"path":"/reference/parse_api_week.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parse_api_week converts an integer to a date — parse_api_week","text":"value value converted epiweek","code":""},{"path":"/reference/parse_api_week.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parse_api_week converts an integer to a date — parse_api_week","text":"date","code":""},{"path":"/reference/parse_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"turn a signal into a callable — parse_signal","title":"turn a signal into a callable — parse_signal","text":"turn signal callable","code":""},{"path":"/reference/parse_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"turn a signal into a callable — parse_signal","text":"","code":"parse_signal(signal, base_url)"},{"path":"/reference/parse_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"turn a signal into a callable — parse_signal","text":"signal signal interest base_url base url","code":""},{"path":"/reference/pub_covid_hosp_facility.html","id":null,"dir":"Reference","previous_headings":"","what":"COVID hospitalizations by facility — pub_covid_hosp_facility","title":"COVID hospitalizations by facility — pub_covid_hosp_facility","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility.html Obtains COVID-19 reported patient impact hospital capacity data facility. dataset provided US Department Health & Human Services. companion function pub_covid_hosp_facility_lookup() can used look facility identifiers variety ways.","code":""},{"path":"/reference/pub_covid_hosp_facility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COVID hospitalizations by facility — pub_covid_hosp_facility","text":"","code":"pub_covid_hosp_facility(   hospital_pks,   collection_weeks = \"*\",   ...,   publication_dates = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_covid_hosp_facility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"COVID hospitalizations by facility — pub_covid_hosp_facility","text":"hospital_pks character. Facility identifiers. collection_weeks timeset. Dates (corresponding epiweeks) fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name publication_dates timeset. Publication dates fetch. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_covid_hosp_facility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"COVID hospitalizations by facility — pub_covid_hosp_facility","text":"tibble::tibble","code":""},{"path":"/reference/pub_covid_hosp_facility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"COVID hospitalizations by facility — pub_covid_hosp_facility","text":"Starting October 1, 2022, facilities required report annually.","code":""},{"path":[]},{"path":"/reference/pub_covid_hosp_facility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"COVID hospitalizations by facility — pub_covid_hosp_facility","text":"","code":"if (FALSE) { pub_covid_hosp_facility(   hospital_pks = \"100075\",   collection_weeks = epirange(20200101, 20200501) )  pub_covid_hosp_facility(   hospital_pks = \"100075\",   collection_weeks = epirange(202001, 202005) ) }"},{"path":"/reference/pub_covid_hosp_facility_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper for finding COVID hospitalization facilities — pub_covid_hosp_facility_lookup","title":"Helper for finding COVID hospitalization facilities — pub_covid_hosp_facility_lookup","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp_facility_lookup.html Obtains unique identifiers metadata COVID hospitalization facilities interest. companion endpoint pub_covid_hosp_facility() endpoint.","code":""},{"path":"/reference/pub_covid_hosp_facility_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper for finding COVID hospitalization facilities — pub_covid_hosp_facility_lookup","text":"","code":"pub_covid_hosp_facility_lookup(   ...,   state = NULL,   ccn = NULL,   city = NULL,   zip = NULL,   fips_code = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_covid_hosp_facility_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper for finding COVID hospitalization facilities — pub_covid_hosp_facility_lookup","text":"... used values, forces later arguments bind name state string. two-letter character state abbreviation. ccn string. facility CMS certification number. city string. city name. zip string. 5-digit zip code. fips_code string. 5-digit fips county code, zero-padded. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_covid_hosp_facility_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper for finding COVID hospitalization facilities — pub_covid_hosp_facility_lookup","text":"tibble::tibble","code":""},{"path":"/reference/pub_covid_hosp_facility_lookup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper for finding COVID hospitalization facilities — pub_covid_hosp_facility_lookup","text":"one location argument needs specified. Combinations arguments currently supported.","code":""},{"path":[]},{"path":"/reference/pub_covid_hosp_facility_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper for finding COVID hospitalization facilities — pub_covid_hosp_facility_lookup","text":"","code":"if (FALSE) { pub_covid_hosp_facility_lookup(state = \"fl\") pub_covid_hosp_facility_lookup(city = \"southlake\") }"},{"path":"/reference/pub_covid_hosp_state_timeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"COVID hospitalizations by state — pub_covid_hosp_state_timeseries","title":"COVID hospitalizations by state — pub_covid_hosp_state_timeseries","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covid_hosp.html. Obtains COVID-19 reported patient impact hospital capacity data state. dataset provided US Department Health & Human Services.","code":""},{"path":"/reference/pub_covid_hosp_state_timeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"COVID hospitalizations by state — pub_covid_hosp_state_timeseries","text":"","code":"pub_covid_hosp_state_timeseries(   states,   dates = \"*\",   ...,   as_of = NULL,   issues = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_covid_hosp_state_timeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"COVID hospitalizations by state — pub_covid_hosp_state_timeseries","text":"states character. Two letter state abbreviations. dates timeset. Dates fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name as_of Date. Optionally, date issues fetch. specified, recent data returned. Mutually exclusive issues. issues timeset. Optionally, issue data fetch. specified, recent issue returned. Mutually exclusive as_of lag. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_covid_hosp_state_timeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"COVID hospitalizations by state — pub_covid_hosp_state_timeseries","text":"tibble::tibble","code":""},{"path":"/reference/pub_covid_hosp_state_timeseries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"COVID hospitalizations by state — pub_covid_hosp_state_timeseries","text":"Starting October 1, 2022, facilities required report annually.","code":""},{"path":"/reference/pub_covid_hosp_state_timeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"COVID hospitalizations by state — pub_covid_hosp_state_timeseries","text":"","code":"if (FALSE) { pub_covid_hosp_state_timeseries(   states = \"fl\",   dates = epirange(20200101, 20200501) ) }"},{"path":"/reference/pub_covidcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Various COVID and flu signals via the COVIDcast endpoint — pub_covidcast","title":"Various COVID and flu signals via the COVIDcast endpoint — pub_covidcast","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html primary endpoint fetching COVID-19 data, providing access wide variety signals wide variety sources. See API documentation link . Delphi's COVIDcast public dashboard powered endpoint.","code":""},{"path":"/reference/pub_covidcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various COVID and flu signals via the COVIDcast endpoint — pub_covidcast","text":"","code":"pub_covidcast(   source,   signals,   geo_type,   time_type,   geo_values = \"*\",   time_values = \"*\",   ...,   as_of = NULL,   issues = NULL,   lag = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_covidcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various COVID and flu signals via the COVIDcast endpoint — pub_covidcast","text":"source string. data source query (see: https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html). signals string. signals query specific source (see: https://cmu-delphi.github.io/delphi-epidata/api/covidcast_signals.html). geo_type string. geographic resolution data (see: https://cmu-delphi.github.io/delphi-epidata/api/covidcast_geography.html). time_type string. temporal resolution data (either \"day\" \"week\", depending signal). geo_values character. geographies return. \"*\" fetches . (See: https://cmu-delphi.github.io/delphi-epidata/api/covidcast_geography.html.) time_values timeset. Dates fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name as_of Date. Optionally, date issues fetch. specified, recent data returned. Mutually exclusive issues lag. issues timeset. Optionally, issue data fetch. specified, recent issue returned. Mutually exclusive as_of lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive as_of issues. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_covidcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various COVID and flu signals via the COVIDcast endpoint — pub_covidcast","text":"tibble::tibble","code":""},{"path":[]},{"path":"/reference/pub_covidcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Various COVID and flu signals via the COVIDcast endpoint — pub_covidcast","text":"","code":"if (FALSE) { pub_covidcast(   source = \"jhu-csse\",   signals = \"confirmed_7dav_incidence_prop\",   geo_type = \"state\",   time_type = \"day\",   geo_values = c(\"ca\", \"fl\"),   time_values = epirange(20200601, 20200801) ) pub_covidcast(   source = \"jhu-csse\",   signals = \"confirmed_7dav_incidence_prop\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"*\",   time_values = epirange(20200601, 20200801) ) }"},{"path":"/reference/pub_covidcast_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for the COVIDcast endpoint — pub_covidcast_meta","title":"Metadata for the COVIDcast endpoint — pub_covidcast_meta","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/covidcast_meta.html. Fetch summary metadata sources signals available API, along basic summary statistics dates available, geographic levels reported, etc.","code":""},{"path":"/reference/pub_covidcast_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for the COVIDcast endpoint — pub_covidcast_meta","text":"","code":"pub_covidcast_meta(fetch_args = fetch_args_list())"},{"path":"/reference/pub_covidcast_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata for the COVIDcast endpoint — pub_covidcast_meta","text":"fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_covidcast_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata for the COVIDcast endpoint — pub_covidcast_meta","text":"tibble::tibble","code":""},{"path":[]},{"path":"/reference/pub_covidcast_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for the COVIDcast endpoint — pub_covidcast_meta","text":"","code":"if (FALSE) { pub_covidcast_meta() }"},{"path":"/reference/pub_delphi.html","id":null,"dir":"Reference","previous_headings":"","what":"Delphi's ILINet outpatient doctor visits forecasts — pub_delphi","title":"Delphi's ILINet outpatient doctor visits forecasts — pub_delphi","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/delphi.html","code":""},{"path":"/reference/pub_delphi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delphi's ILINet outpatient doctor visits forecasts — pub_delphi","text":"","code":"pub_delphi(system, epiweek, fetch_args = fetch_args_list())"},{"path":"/reference/pub_delphi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delphi's ILINet outpatient doctor visits forecasts — pub_delphi","text":"system character. System name fetch. epiweek timeset. Epiweek fetch. support multiple dates. Make separate calls fetch data multiple epiweeks. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_delphi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delphi's ILINet outpatient doctor visits forecasts — pub_delphi","text":"list","code":""},{"path":"/reference/pub_delphi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delphi's ILINet outpatient doctor visits forecasts — pub_delphi","text":"","code":"if (FALSE) { pub_delphi(system = \"ec\", epiweek = 201501) }"},{"path":"/reference/pub_dengue_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Delphi's PAHO dengue nowcasts (North and South America) — pub_dengue_nowcast","title":"Delphi's PAHO dengue nowcasts (North and South America) — pub_dengue_nowcast","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/dengue_nowcast.html","code":""},{"path":"/reference/pub_dengue_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delphi's PAHO dengue nowcasts (North and South America) — pub_dengue_nowcast","text":"","code":"pub_dengue_nowcast(locations, epiweeks = \"*\", fetch_args = fetch_args_list())"},{"path":"/reference/pub_dengue_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delphi's PAHO dengue nowcasts (North and South America) — pub_dengue_nowcast","text":"locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_dengue_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delphi's PAHO dengue nowcasts (North and South America) — pub_dengue_nowcast","text":"tibble::tibble","code":""},{"path":"/reference/pub_dengue_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delphi's PAHO dengue nowcasts (North and South America) — pub_dengue_nowcast","text":"","code":"if (FALSE) { pub_dengue_nowcast(   locations = \"pr\",   epiweeks = epirange(201401, 202301) ) }"},{"path":"/reference/pub_ecdc_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"ECDC ILI incidence (Europe) — pub_ecdc_ili","title":"ECDC ILI incidence (Europe) — pub_ecdc_ili","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/ecdc_ili.html. Obtain information influenza-like-illness European Centre Disease Prevention Control.","code":""},{"path":"/reference/pub_ecdc_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ECDC ILI incidence (Europe) — pub_ecdc_ili","text":"","code":"pub_ecdc_ili(   regions,   epiweeks = \"*\",   ...,   issues = NULL,   lag = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_ecdc_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ECDC ILI incidence (Europe) — pub_ecdc_ili","text":"regions character. Regions fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name issues timeset. Optionally, issues fetch. set, recent issue returned. Mutually exclusive lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive issues. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_ecdc_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ECDC ILI incidence (Europe) — pub_ecdc_ili","text":"tibble::tibble","code":""},{"path":"/reference/pub_ecdc_ili.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ECDC ILI incidence (Europe) — pub_ecdc_ili","text":"list location argument can found https://github.com/cmu-delphi/delphi-epidata/blob/main/labels/ecdc_regions.txt.","code":""},{"path":"/reference/pub_ecdc_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ECDC ILI incidence (Europe) — pub_ecdc_ili","text":"","code":"if (FALSE) { pub_ecdc_ili(regions = \"austria\", epiweeks = epirange(201901, 202001)) }"},{"path":"/reference/pub_flusurv.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC FluSurv flu hospitalizations — pub_flusurv","title":"CDC FluSurv flu hospitalizations — pub_flusurv","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/flusurv.html. Obtain information influenza hospitalization rates Center Disease Control. See also https://gis.cdc.gov/GRASP/Fluview/FluHospRates.html.","code":""},{"path":"/reference/pub_flusurv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC FluSurv flu hospitalizations — pub_flusurv","text":"","code":"pub_flusurv(   locations,   epiweeks = \"*\",   ...,   issues = NULL,   lag = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_flusurv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDC FluSurv flu hospitalizations — pub_flusurv","text":"locations character. Character vector indicating location. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name issues timeset. Optionally, issues fetch. set, recent issue returned. Mutually exclusive lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive issues. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_flusurv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDC FluSurv flu hospitalizations — pub_flusurv","text":"tibble::tibble","code":""},{"path":"/reference/pub_flusurv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDC FluSurv flu hospitalizations — pub_flusurv","text":"list location argument can found https://github.com/cmu-delphi/delphi-epidata/blob/main/labels/flusurv_locations.txt.","code":""},{"path":"/reference/pub_flusurv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDC FluSurv flu hospitalizations — pub_flusurv","text":"","code":"if (FALSE) { pub_flusurv(locations = \"CA\", epiweeks = epirange(201701, 201801)) }"},{"path":"/reference/pub_fluview.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC FluView ILINet outpatient doctor visits — pub_fluview","title":"CDC FluView ILINet outpatient doctor visits — pub_fluview","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/fluview.html. Obtains information outpatient inluenza-like-illness (ILI) U.S. Outpatient Influenza-like Illness Surveillance Network (ILINet). information ILINet, see https://gis.cdc.gov/grasp/fluview/fluportaldashboard.html.","code":""},{"path":"/reference/pub_fluview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC FluView ILINet outpatient doctor visits — pub_fluview","text":"","code":"pub_fluview(   regions,   epiweeks = \"*\",   ...,   issues = NULL,   lag = NULL,   auth = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_fluview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDC FluView ILINet outpatient doctor visits — pub_fluview","text":"regions character. Locations fetch. Can string IDs national, HHS region, census division, states territories, . Full list link . epiweeks timeset. Epiweeks fetch form epirange(startweek, endweek), startweek endweek form YYYYWW (string numeric). Defaults (\"*\") dates. ... used values, forces later arguments bind name issues timeset. Optionally, issues fetch. set, recent issue returned. Mutually exclusive lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive issues. auth string. Optionally, restricted access key (API key). fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_fluview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDC FluView ILINet outpatient doctor visits — pub_fluview","text":"tibble::tibble","code":""},{"path":"/reference/pub_fluview.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CDC FluView ILINet outpatient doctor visits — pub_fluview","text":"full list location inputs can accessed https://github.com/cmu-delphi/delphi-epidata/blob/main/src/acquisition/fluview/fluview_locations.py.","code":""},{"path":"/reference/pub_fluview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDC FluView ILINet outpatient doctor visits — pub_fluview","text":"","code":"if (FALSE) { pub_fluview(regions = \"nat\", epiweeks = epirange(201201, 202005)) }"},{"path":"/reference/pub_fluview_clinical.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC FluView flu tests from clinical labs — pub_fluview_clinical","title":"CDC FluView flu tests from clinical labs — pub_fluview_clinical","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/fluview_clinical.html","code":""},{"path":"/reference/pub_fluview_clinical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC FluView flu tests from clinical labs — pub_fluview_clinical","text":"","code":"pub_fluview_clinical(   regions,   epiweeks = \"*\",   ...,   issues = NULL,   lag = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_fluview_clinical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDC FluView flu tests from clinical labs — pub_fluview_clinical","text":"regions character. Regions fetch. epiweeks timeset. Epiweeks fetch form epirange(startweek,endweek), startweek endweek form YYYYWW (string numeric). Defaults (\"*\") dates. ... used values, forces later arguments bind name issues timeset. Optionally, issues fetch. set, recent issue returned. Mutually exclusive lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive issues. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_fluview_clinical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDC FluView flu tests from clinical labs — pub_fluview_clinical","text":"tibble::tibble","code":""},{"path":"/reference/pub_fluview_clinical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDC FluView flu tests from clinical labs — pub_fluview_clinical","text":"","code":"if (FALSE) { pub_fluview_clinical(regions = \"nat\", epiweeks = epirange(201601, 201701)) }"},{"path":"/reference/pub_fluview_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for the FluView endpoint — pub_fluview_meta","title":"Metadata for the FluView endpoint — pub_fluview_meta","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/fluview_meta.html","code":""},{"path":"/reference/pub_fluview_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for the FluView endpoint — pub_fluview_meta","text":"","code":"pub_fluview_meta(fetch_args = fetch_args_list())"},{"path":"/reference/pub_fluview_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata for the FluView endpoint — pub_fluview_meta","text":"fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_fluview_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata for the FluView endpoint — pub_fluview_meta","text":"tibble::tibble","code":""},{"path":[]},{"path":"/reference/pub_fluview_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for the FluView endpoint — pub_fluview_meta","text":"","code":"if (FALSE) { pub_fluview_meta() }"},{"path":"/reference/pub_gft.html","id":null,"dir":"Reference","previous_headings":"","what":"Google Flu Trends flu search volume — pub_gft","title":"Google Flu Trends flu search volume — pub_gft","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/gft.html Obtains estimates inluenza activity based volume certain search queries Google.","code":""},{"path":"/reference/pub_gft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Google Flu Trends flu search volume — pub_gft","text":"","code":"pub_gft(locations, epiweeks = \"*\", fetch_args = fetch_args_list())"},{"path":"/reference/pub_gft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Google Flu Trends flu search volume — pub_gft","text":"locations character. Locations fetch. epiweeks timeset Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_gft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Google Flu Trends flu search volume — pub_gft","text":"tibble::tibble","code":""},{"path":"/reference/pub_gft.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Google Flu Trends flu search volume — pub_gft","text":"Google discontinued Flu Trends now static endpoint. Possibile input locations can found https://github.com/cmu-delphi/delphi-epidata/blob/main/labels/regions.txt, https://github.com/cmu-delphi/delphi-epidata/blob/main/labels/states.txt, https://github.com/cmu-delphi/delphi-epidata/blob/main/labels/cities.txt.","code":""},{"path":"/reference/pub_gft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Google Flu Trends flu search volume — pub_gft","text":"","code":"if (FALSE) { pub_gft(locations = \"hhs1\", epiweeks = epirange(201201, 202001)) }"},{"path":"/reference/pub_kcdc_ili.html","id":null,"dir":"Reference","previous_headings":"","what":"KCDC ILI incidence (Korea) — pub_kcdc_ili","title":"KCDC ILI incidence (Korea) — pub_kcdc_ili","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/kcdc_ili.html","code":""},{"path":"/reference/pub_kcdc_ili.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KCDC ILI incidence (Korea) — pub_kcdc_ili","text":"","code":"pub_kcdc_ili(   regions,   epiweeks = \"*\",   ...,   issues = NULL,   lag = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_kcdc_ili.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"KCDC ILI incidence (Korea) — pub_kcdc_ili","text":"regions character. Regions fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name issues timeset. Optionally, issues fetch. set, recent issue returned. Mutually exclusive lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive issues. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_kcdc_ili.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KCDC ILI incidence (Korea) — pub_kcdc_ili","text":"tibble::tibble","code":""},{"path":"/reference/pub_kcdc_ili.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KCDC ILI incidence (Korea) — pub_kcdc_ili","text":"","code":"if (FALSE) { pub_kcdc_ili(regions = \"ROK\", epiweeks = 200436) }"},{"path":"/reference/pub_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for the Delphi Epidata API — pub_meta","title":"Metadata for the Delphi Epidata API — pub_meta","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/meta.html","code":""},{"path":"/reference/pub_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for the Delphi Epidata API — pub_meta","text":"","code":"pub_meta(fetch_args = fetch_args_list())"},{"path":"/reference/pub_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata for the Delphi Epidata API — pub_meta","text":"fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata for the Delphi Epidata API — pub_meta","text":"list","code":""},{"path":"/reference/pub_nidss_dengue.html","id":null,"dir":"Reference","previous_headings":"","what":"NIDSS dengue cases (Taiwan) — pub_nidss_dengue","title":"NIDSS dengue cases (Taiwan) — pub_nidss_dengue","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/nidss_dengue.html Obtains counts confirmed dengue cases Taiwan Taiwan National Infectious Disease Statistical System.","code":""},{"path":"/reference/pub_nidss_dengue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NIDSS dengue cases (Taiwan) — pub_nidss_dengue","text":"","code":"pub_nidss_dengue(locations, epiweeks = \"*\", fetch_args = fetch_args_list())"},{"path":"/reference/pub_nidss_dengue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NIDSS dengue cases (Taiwan) — pub_nidss_dengue","text":"locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_nidss_dengue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NIDSS dengue cases (Taiwan) — pub_nidss_dengue","text":"tibble::tibble","code":""},{"path":"/reference/pub_nidss_dengue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NIDSS dengue cases (Taiwan) — pub_nidss_dengue","text":"Possible location inputs can found https://github.com/cmu-delphi/delphi-epidata/blob/main/labels/nidss_regions.txt https://github.com/cmu-delphi/delphi-epidata/blob/main/labels/nidss_locations.txt.","code":""},{"path":"/reference/pub_nidss_dengue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NIDSS dengue cases (Taiwan) — pub_nidss_dengue","text":"","code":"if (FALSE) { pub_nidss_dengue(locations = \"taipei\", epiweeks = epirange(201201, 201301)) }"},{"path":"/reference/pub_nidss_flu.html","id":null,"dir":"Reference","previous_headings":"","what":"NIDSS flu doctor visits (Taiwan) — pub_nidss_flu","title":"NIDSS flu doctor visits (Taiwan) — pub_nidss_flu","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/nidss_flu.html Obtains information outpatient inluenza-like-illness Taiwan National Infectious Disease Statistical System.","code":""},{"path":"/reference/pub_nidss_flu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NIDSS flu doctor visits (Taiwan) — pub_nidss_flu","text":"","code":"pub_nidss_flu(   regions,   epiweeks = \"*\",   ...,   issues = NULL,   lag = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_nidss_flu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NIDSS flu doctor visits (Taiwan) — pub_nidss_flu","text":"regions character. Regions fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name issues timeset. Optionally, issues fetch. set, recent issue returned. Mutually exclusive lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive issues. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_nidss_flu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NIDSS flu doctor visits (Taiwan) — pub_nidss_flu","text":"tibble::tibble","code":""},{"path":"/reference/pub_nidss_flu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NIDSS flu doctor visits (Taiwan) — pub_nidss_flu","text":"","code":"if (FALSE) { pub_nidss_flu(regions = \"taipei\", epiweeks = epirange(201501, 201601)) }"},{"path":"/reference/pub_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Delphi's ILI Nearby nowcasts — pub_nowcast","title":"Delphi's ILI Nearby nowcasts — pub_nowcast","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/nowcast.html. Obtains information outpatient inluenza-like-illness (ILI) Delphi's","code":""},{"path":"/reference/pub_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delphi's ILI Nearby nowcasts — pub_nowcast","text":"","code":"pub_nowcast(locations, epiweeks = \"*\", fetch_args = fetch_args_list())"},{"path":"/reference/pub_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delphi's ILI Nearby nowcasts — pub_nowcast","text":"locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delphi's ILI Nearby nowcasts — pub_nowcast","text":"tibble::tibble","code":""},{"path":"/reference/pub_nowcast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Delphi's ILI Nearby nowcasts — pub_nowcast","text":"full list location inputs can accessed https://github.com/cmu-delphi/delphi-epidata/blob/main/src/acquisition/fluview/fluview_locations.py.","code":""},{"path":"/reference/pub_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delphi's ILI Nearby nowcasts — pub_nowcast","text":"","code":"if (FALSE) { pub_nowcast(locations = \"ca\", epiweeks = epirange(201201, 201301)) }"},{"path":"/reference/pub_paho_dengue.html","id":null,"dir":"Reference","previous_headings":"","what":"PAHO dengue data (North and South America) — pub_paho_dengue","title":"PAHO dengue data (North and South America) — pub_paho_dengue","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/paho_dengue.html","code":""},{"path":"/reference/pub_paho_dengue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PAHO dengue data (North and South America) — pub_paho_dengue","text":"","code":"pub_paho_dengue(   regions,   epiweeks = \"*\",   ...,   issues = NULL,   lag = NULL,   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_paho_dengue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PAHO dengue data (North and South America) — pub_paho_dengue","text":"regions character. Regions fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. ... used values, forces later arguments bind name issues timeset. Optionally, issues fetch. set, recent issue returned. Mutually exclusive lag. lag integer. Optionally, lag issues fetch. set, recent issue returned. Mutually exclusive issues. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_paho_dengue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PAHO dengue data (North and South America) — pub_paho_dengue","text":"tibble::tibble","code":""},{"path":"/reference/pub_paho_dengue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PAHO dengue data (North and South America) — pub_paho_dengue","text":"","code":"if (FALSE) { pub_paho_dengue(regions = \"ca\", epiweeks = epirange(201401, 201501)) }"},{"path":"/reference/pub_wiki.html","id":null,"dir":"Reference","previous_headings":"","what":"Wikipedia webpage counts by article — pub_wiki","title":"Wikipedia webpage counts by article — pub_wiki","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/wiki.html Number page visits selected English, Influenza-related wikipedia articles. Source: Wikimedia Temporal Resolution: Hourly, daily, weekly 2007-12-09 (2007w50) Spatial Resolution: N/resolution: article (54) Open access","code":""},{"path":"/reference/pub_wiki.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wikipedia webpage counts by article — pub_wiki","text":"","code":"pub_wiki(   articles,   ...,   time_type = c(\"day\", \"week\"),   time_values = \"*\",   hours = NULL,   language = \"en\",   fetch_args = fetch_args_list() )"},{"path":"/reference/pub_wiki.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wikipedia webpage counts by article — pub_wiki","text":"articles character. Articles fetch. ... used values, forces later arguments bind name time_type string. temporal resolution data (either \"day\" \"week\", depending signal). time_values timeset. Dates epiweeks fetch. Defaults (\"*\") dates. hours integer. Optionally, hours fetch. language string. Language fetch. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pub_wiki.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wikipedia webpage counts by article — pub_wiki","text":"tibble::tibble","code":""},{"path":"/reference/pub_wiki.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wikipedia webpage counts by article — pub_wiki","text":"","code":"if (FALSE) { pub_wiki(   articles = \"avian_influenza\",   time_type = \"week\",   time_values = epirange(201501, 201601) ) }"},{"path":"/reference/pvt_cdc.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC total and by topic webpage visits — pvt_cdc","title":"CDC total and by topic webpage visits — pvt_cdc","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/cdc.html","code":""},{"path":"/reference/pvt_cdc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC total and by topic webpage visits — pvt_cdc","text":"","code":"pvt_cdc(auth, locations, epiweeks = \"*\", fetch_args = fetch_args_list())"},{"path":"/reference/pvt_cdc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDC total and by topic webpage visits — pvt_cdc","text":"auth string. Restricted access key (API key). locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch(). See fetch_args_list() details.","code":""},{"path":"/reference/pvt_cdc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDC total and by topic webpage visits — pvt_cdc","text":"tibble::tibble","code":""},{"path":"/reference/pvt_cdc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDC total and by topic webpage visits — pvt_cdc","text":"","code":"if (FALSE) { pvt_cdc(   auth = Sys.getenv(\"SECRET_API_AUTH_CDC\"),   locations = \"fl,ca\",   epirange(201501, 201601) ) }"},{"path":"/reference/pvt_dengue_sensors.html","id":null,"dir":"Reference","previous_headings":"","what":"PAHO dengue digital surveillance sensors (North and South America) — pvt_dengue_sensors","title":"PAHO dengue digital surveillance sensors (North and South America) — pvt_dengue_sensors","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/dengue_sensors.html","code":""},{"path":"/reference/pvt_dengue_sensors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PAHO dengue digital surveillance sensors (North and South America) — pvt_dengue_sensors","text":"","code":"pvt_dengue_sensors(   auth,   names,   locations,   epiweeks = \"*\",   fetch_args = fetch_args_list() )"},{"path":"/reference/pvt_dengue_sensors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PAHO dengue digital surveillance sensors (North and South America) — pvt_dengue_sensors","text":"auth string. Restricted access key (API key). names character. Names fetch. locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pvt_dengue_sensors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PAHO dengue digital surveillance sensors (North and South America) — pvt_dengue_sensors","text":"tibble::tibble","code":""},{"path":"/reference/pvt_dengue_sensors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PAHO dengue digital surveillance sensors (North and South America) — pvt_dengue_sensors","text":"","code":"if (FALSE) { pvt_dengue_sensors(   auth = Sys.getenv(\"SECRET_API_AUTH_SENSORS\"),   names = \"ght\",   locations = \"ag\",   epiweeks = epirange(201501, 202001) ) }"},{"path":"/reference/pvt_ght.html","id":null,"dir":"Reference","previous_headings":"","what":"Google Health Trends health topics search volume — pvt_ght","title":"Google Health Trends health topics search volume — pvt_ght","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/ght.html Estimate influenza activity based volume certain search queries. …","code":""},{"path":"/reference/pvt_ght.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Google Health Trends health topics search volume — pvt_ght","text":"","code":"pvt_ght(auth, locations, epiweeks = \"*\", query, fetch_args = fetch_args_list())"},{"path":"/reference/pvt_ght.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Google Health Trends health topics search volume — pvt_ght","text":"auth string. Restricted access key (API key). locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. query string. query fetched. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pvt_ght.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Google Health Trends health topics search volume — pvt_ght","text":"tibble::tibble","code":""},{"path":"/reference/pvt_ght.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Google Health Trends health topics search volume — pvt_ght","text":"","code":"if (FALSE) { pvt_ght(   auth = Sys.getenv(\"SECRET_API_AUTH_GHT\"),   locations = \"ma\",   epiweeks = epirange(199301, 202304),   query = \"how to get over the flu\" ) }"},{"path":"/reference/pvt_meta_norostat.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for the NoroSTAT endpoint — pvt_meta_norostat","title":"Metadata for the NoroSTAT endpoint — pvt_meta_norostat","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/meta_norostat.html","code":""},{"path":"/reference/pvt_meta_norostat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for the NoroSTAT endpoint — pvt_meta_norostat","text":"","code":"pvt_meta_norostat(auth, fetch_args = fetch_args_list())"},{"path":"/reference/pvt_meta_norostat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metadata for the NoroSTAT endpoint — pvt_meta_norostat","text":"auth string. Restricted access key (API key). fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pvt_meta_norostat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metadata for the NoroSTAT endpoint — pvt_meta_norostat","text":"list","code":""},{"path":[]},{"path":"/reference/pvt_meta_norostat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for the NoroSTAT endpoint — pvt_meta_norostat","text":"","code":"if (FALSE) { pvt_meta_norostat(auth = Sys.getenv(\"SECRET_API_AUTH_NOROSTAT\")) }"},{"path":"/reference/pvt_norostat.html","id":null,"dir":"Reference","previous_headings":"","what":"CDC NoroSTAT norovirus outbreaks — pvt_norostat","title":"CDC NoroSTAT norovirus outbreaks — pvt_norostat","text":"point data , include minima maxima. API docs: https://cmu-delphi.github.io/delphi-epidata/api/norostat.html documentation API accessing NoroSTAT endpoint Delphi’s epidemiological data.","code":""},{"path":"/reference/pvt_norostat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CDC NoroSTAT norovirus outbreaks — pvt_norostat","text":"","code":"pvt_norostat(auth, locations, epiweeks = \"*\", fetch_args = fetch_args_list())"},{"path":"/reference/pvt_norostat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CDC NoroSTAT norovirus outbreaks — pvt_norostat","text":"auth string. authentication key. locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pvt_norostat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CDC NoroSTAT norovirus outbreaks — pvt_norostat","text":"tibble::tibble","code":""},{"path":"/reference/pvt_norostat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CDC NoroSTAT norovirus outbreaks — pvt_norostat","text":"","code":"if (FALSE) { pvt_norostat(   auth = Sys.getenv(\"SECRET_API_AUTH_NOROSTAT\"),   locations = \"1\",   epiweeks = 201233 ) }"},{"path":"/reference/pvt_quidel.html","id":null,"dir":"Reference","previous_headings":"","what":"Quidel COVID-19 and influenza testing data — pvt_quidel","title":"Quidel COVID-19 and influenza testing data — pvt_quidel","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/quidel.html Data provided Quidel Corp., contains flu lab test results.","code":""},{"path":"/reference/pvt_quidel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quidel COVID-19 and influenza testing data — pvt_quidel","text":"","code":"pvt_quidel(auth, locations, epiweeks = \"*\", fetch_args = fetch_args_list())"},{"path":"/reference/pvt_quidel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quidel COVID-19 and influenza testing data — pvt_quidel","text":"auth string. Restricted access key (API key). locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pvt_quidel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quidel COVID-19 and influenza testing data — pvt_quidel","text":"tibble::tibble","code":""},{"path":"/reference/pvt_quidel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quidel COVID-19 and influenza testing data — pvt_quidel","text":"","code":"if (FALSE) { pvt_quidel(   auth = Sys.getenv(\"SECRET_API_AUTH_QUIDEL\"),   epiweeks = epirange(201201, 202001),   locations = \"hhs1\" ) }"},{"path":"/reference/pvt_sensors.html","id":null,"dir":"Reference","previous_headings":"","what":"Influenza and dengue digital surveillance sensors — pvt_sensors","title":"Influenza and dengue digital surveillance sensors — pvt_sensors","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/sensors.html documentation API accessing Digital Surveillance Sensors endpoint Delphi’s epidemiological. Note: repository built support modeling forecasting efforts surrounding seasonal influenza (dengue). current COVID-19 pandemic, syndromic surveillance data, like ILI data (influenza-like illness) FluView, likely prove useful. However, urge caution users examining digital surveillance sensors, like ILI Nearby, Google Flu Trends, etc., COVID-19 pandemic, designed track ILI driven seasonal influenza, designed track ILI COVID-19 pandemic.","code":""},{"path":"/reference/pvt_sensors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Influenza and dengue digital surveillance sensors — pvt_sensors","text":"","code":"pvt_sensors(   auth,   names,   locations,   epiweeks = \"*\",   fetch_args = fetch_args_list() )"},{"path":"/reference/pvt_sensors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Influenza and dengue digital surveillance sensors — pvt_sensors","text":"auth string. Restricted access key (API key). names character. Sensor names fetch. locations character. Locations fetch. epiweeks timeset. Epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pvt_sensors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Influenza and dengue digital surveillance sensors — pvt_sensors","text":"tibble::tibble","code":""},{"path":"/reference/pvt_sensors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Influenza and dengue digital surveillance sensors — pvt_sensors","text":"","code":"if (FALSE) { pvt_sensors(   auth = Sys.getenv(\"SECRET_API_AUTH_SENSORS\"),   names = \"sar3\",   locations = \"nat\",   epiweeks = epirange(201501, 202001) ) }"},{"path":"/reference/pvt_twitter.html","id":null,"dir":"Reference","previous_headings":"","what":"HealthTweets total and influenza-related tweets — pvt_twitter","title":"HealthTweets total and influenza-related tweets — pvt_twitter","text":"API docs: https://cmu-delphi.github.io/delphi-epidata/api/twitter.html API documentation accessing Twitter Stream endpoint Delphi’s epidemiological data. Sourced Healthtweets","code":""},{"path":"/reference/pvt_twitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HealthTweets total and influenza-related tweets — pvt_twitter","text":"","code":"pvt_twitter(   auth,   locations,   ...,   time_type = c(\"day\", \"week\"),   time_values = \"*\",   fetch_args = fetch_args_list() )"},{"path":"/reference/pvt_twitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HealthTweets total and influenza-related tweets — pvt_twitter","text":"auth string. Restricted access key (API key). locations character. Locations fetch. ... used values, forces later arguments bind name time_type string. temporal resolution data (either \"day\" \"week\", depending signal). time_values timeset. Dates epiweeks fetch. Defaults (\"*\") dates. fetch_args fetch_args. Additional arguments pass fetch().","code":""},{"path":"/reference/pvt_twitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HealthTweets total and influenza-related tweets — pvt_twitter","text":"tibble::tibble","code":""},{"path":"/reference/pvt_twitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HealthTweets total and influenza-related tweets — pvt_twitter","text":"","code":"if (FALSE) { pvt_twitter(   auth = Sys.getenv(\"SECRET_API_AUTH_TWITTER\"),   locations = \"CA\",   time_type = \"week\",   time_values = epirange(201501, 202001) ) }"},{"path":"/reference/reformat_epirange.html","id":null,"dir":"Reference","previous_headings":"","what":"helper to convert an epirange from week to day or vice versa — reformat_epirange","title":"helper to convert an epirange from week to day or vice versa — reformat_epirange","text":"helper convert epirange week day vice versa","code":""},{"path":"/reference/reformat_epirange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper to convert an epirange from week to day or vice versa — reformat_epirange","text":"","code":"reformat_epirange(epirange, to_type = c(\"day\", \"week\"))"},{"path":"/reference/release_bullets.html","id":null,"dir":"Reference","previous_headings":"","what":"inserts each string as a bullet at the end of the ","title":"inserts each string as a bullet at the end of the ","text":"inserts string bullet end \"Prepare release\" section","code":""},{"path":"/reference/release_bullets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inserts each string as a bullet at the end of the ","text":"","code":"release_bullets()"},{"path":"/reference/request_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes a request to the API and returns the response, catching\nHTTP errors and forwarding the HTTP body in R errors — request_impl","title":"Makes a request to the API and returns the response, catching\nHTTP errors and forwarding the HTTP body in R errors — request_impl","text":"Makes request API returns response, catching HTTP errors forwarding HTTP body R errors","code":""},{"path":"/reference/request_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes a request to the API and returns the response, catching\nHTTP errors and forwarding the HTTP body in R errors — request_impl","text":"","code":"request_impl(epidata_call, format_type, timeout_seconds, fields)"},{"path":"/reference/request_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the full request url for the given epidata_call — request_url","title":"Returns the full request url for the given epidata_call — request_url","text":"Returns full request url given epidata_call","code":""},{"path":"/reference/request_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the full request url for the given epidata_call — request_url","text":"","code":"request_url(epidata_call, format_type = \"classic\", fields = NULL)"},{"path":"/reference/request_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the full request url for the given epidata_call — request_url","text":"epidata_call instance epidata_call format_type format return one classic,json,csv fields list epidata fields return, NULL return fields (default) e.g. c(\"time_value\", \"value\") return time_value value fields c(\"-direction\") return everything except direction field","code":""},{"path":"/reference/request_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the full request url for the given epidata_call — request_url","text":"request_url: string containing URL","code":""},{"path":"/reference/set_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Create or renew a cache for this session — set_cache","title":"Create or renew a cache for this session — set_cache","text":"default, epidatr re-requests data API every call fetch. case find repeatedly calling data, can enable cache using either function given session, environmental variables persistent cache. typical recommended workflow using cache set environmental variables EPIDATR_USE_CACHE=TRUE EPIDATR_CACHE_DIRECTORY=\"//directory/\".Renviron, example calling usethis::edit_r_environ(). See parameters configurables inclined. set_cache (re)defines cache use particular R session. clear existing data previous location, instead creates handle new cache using cachem seamlessly handles caching . Say cache normally stored default directory, current session want save results ~//temporary/savedirectory, call set_cache(dir = \"~//temporary/savedirectory\"). know data 2 days ago wrong, call set_cache(days = 1) clear older data whenever cache referenced. cases, changes last single session (though deleted data gone permanently!). important feature caching package calls specify either issues certain date, as_of certain date actually cache. example call   cache, since possible cache invalidated new releases warning. hand, call   cache, since normal new versions data invalidate (since as_of later date). still possible Delphi may patch data, frequency order months rather days. working creating public channel communicate updates. specifying issues usually cache, call issues=\"*\" cache, since subject cache invalidation normal versioning. backend, cache uses cachem, filenames generated using md5 encoding call url. file corresponds unique epidata-API call.","code":"pub_covidcast(   source = \"jhu-csse\",   signals = \"confirmed_7dav_incidence_prop\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"ca,fl\",   time_values = epirange(20200601, 20230801) ) pub_covidcast(   source = \"jhu-csse\",   signals = \"confirmed_7dav_incidence_prop\",   geo_type = \"state\",   time_type = \"day\",   geo_values = \"ca,fl\",   time_values = epirange(20200601, 20230801),   as_of = \"2023-08-01\" )"},{"path":"/reference/set_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create or renew a cache for this session — set_cache","text":"","code":"set_cache(   cache_dir = NULL,   days = NULL,   max_size = NULL,   logfile = NULL,   confirm = TRUE,   startup = FALSE )"},{"path":"/reference/set_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create or renew a cache for this session — set_cache","text":"cache_dir directory cache stored. default, rappdirs::user_cache_dir(\"R\", version = \"epidatr\"). path can either relative absolute. environmental variable EPIDATR_CACHE_DIR. days maximum length time days keep particular cached call. default 1. environmental variable EPIDATR_CACHE_MAX_AGE_DAYS. max_size size entire cache, MB, start pruning entries. default 1024, 1GB. environmental variable EPIDATR_CACHE_MAX_SIZE_MB. logfile cachem's log transactions stored, relative cache directory. default, \"logfile.txt\". environmental variable EPIDATR_CACHE_LOGFILE. confirm whether confirm directory creation. default TRUE; set non-interactive scripts startup indicates whether function called startup. Affects suppressability messages. Default FALSE.","code":""},{"path":"/reference/set_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create or renew a cache for this session — set_cache","text":"NULL return value, effects stored package environment","code":""},{"path":[]},{"path":"/reference/set_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create or renew a cache for this session — set_cache","text":"","code":"set_cache(   cache_dir = tempdir(),   days = 14,   max_size = 512,   logfile = \"logs.txt\" ) #> ! epidatr cache is being used (set env var EPIDATR_USE_CACHE=FALSE if not #>   intended). #> ℹ The cache directory is /tmp/Rtmp5OTSpb. #> ℹ The cache will be cleared after 14 days and will be pruned if it exceeds 512 #>   MB. #> ℹ The log of cache transactions is stored at /tmp/Rtmp5OTSpb/logs.txt."},{"path":"/reference/timeset.html","id":null,"dir":"Reference","previous_headings":"","what":"Timeset formats for specifying dates — timeset","title":"Timeset formats for specifying dates — timeset","text":"Many API calls accept timesets specify time ranges data requested. Timesets can specified epirange(), Date objects, wildcards.","code":""},{"path":"/reference/timeset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Timeset formats for specifying dates — timeset","text":"Timesets special R types; term simply describes value accepted epidatr specify time value epidata query: Dates: Date instances. Date strings integers: Strings integers format YYYYMMDD. Epiweeks: Strings integers format YYYYWW, WW epiweek number. EpiRanges: range returned epirange(), list multiple ranges. Wildcard: string \"*\", requests available time values. Refer specific endpoint documentation guidance using dates vs weeks. endpoints support one . (less commonly used) endpoints may accept \"*\" wildcard, can simulated large epirange().","code":""},{"path":"/reference/with_base_url.html","id":null,"dir":"Reference","previous_headings":"","what":"epidata_call object using a different base URL — with_base_url","title":"epidata_call object using a different base URL — with_base_url","text":"epidata_call object using different base URL","code":""},{"path":"/reference/with_base_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"epidata_call object using a different base URL — with_base_url","text":"","code":"with_base_url(epidata_call, base_url)"},{"path":"/reference/with_base_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"epidata_call object using a different base URL — with_base_url","text":"epidata_call instance epidata_call base_url base URL use","code":""},{"path":"/reference/with_base_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"epidata_call object using a different base URL — with_base_url","text":"epidata_call object","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"/news/index.html","id":"patches-1-1-1","dir":"Changelog","previous_headings":"","what":"Patches","title":"epidatr 1.1.1","text":"Fixed failure passing as_of values Date format pub_covidcast caching enabled (#259)","code":""},{"path":"/news/index.html","id":"epidatr-110","dir":"Changelog","previous_headings":"","what":"epidatr 1.1.0","title":"epidatr 1.1.0","text":"CRAN release: 2024-02-29","code":""},{"path":"/news/index.html","id":"changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"epidatr 1.1.0","text":"pub_covid_hosp_state_timeseries now supports use as_of parameter (#209). release_date latest_update fields now parsed Date, rather text. change impacts several endpoints. get_auth_key renamed get_api_key (#181). get_api_key longer reads R options uses environment variables (#217). pvt_twitter pub_wiki now use time_type time_values args instead mutually exclusive dates epiweeks (#236). matches interface pub_covidcast endpoint. Updated default timeout_seconds 15 minutes allow large queries default. ## Features Function reference now displays commonly-used functions first (#205). Support Date objects passed version arguments as_of issues endpoints (#192, #194). clear_cache now handles positional arguments just like set_cache (#197). set_api_key now available help persist API key environment variables (#181, #217). endpoints now support use “*” wildcard fetch dates epiweeks (#234). ## Patches Endpoints now fail passed misspelled arguments (#187, #201). pub_fluview_meta fixed fetch response automatically. pub_covid_hosp_state_timeseries now correctly parses issue field, instead returning missing value (#202). pub_fluview_meta, latest_issue field now parsed epiweek, rather parsed Date returning missing value. set_cache cache size longer runs integer overflow (#189). Improve line-wrapping warning messages (#191). Fix documentation related CRAN submission. Fix errors passing “” key. Fixed bug NAs parsing ints (#243).","code":""},{"path":"/news/index.html","id":"epidatr-100","dir":"Changelog","previous_headings":"","what":"epidatr 1.0.0","title":"epidatr 1.0.0","text":"CRAN release: 2023-09-19 Add set_cache caching functions. Prefix non-private endpoints pub_. Update printing avail_endpoints readable. Update printing covidcast_epidata() readable. Update landing docs friendly, add plots.","code":""},{"path":"/news/index.html","id":"epidatr-090","dir":"Changelog","previous_headings":"","what":"epidatr 0.9.0","title":"epidatr 0.9.0","text":"Major interface change: endpoints now fetch default. Make fetch function internal. Change fetch fetch_* function interfaces now rely fetch_args_list. Added fetch_args_list returns list arguments passed fetch.","code":""},{"path":"/news/index.html","id":"epidatr-080","dir":"Changelog","previous_headings":"","what":"epidatr 0.8.0","title":"epidatr 0.8.0","text":"Fix source name duplication bug covidcast_epidata. Mark covidcast_epidata experimental export . Change covidcast arg data_source source. Make covidcast args issues, lag, as_of mutually exclusive. Make covid_hosp_facility_lookup args state, ccn, city, zip, fips_code mutually exclusive. Update documentation refer character strings (character vectors character strings).","code":""},{"path":"/news/index.html","id":"epidatr-071","dir":"Changelog","previous_headings":"","what":"epidatr 0.7.1","title":"epidatr 0.7.1","text":"Update README.md better onboarding. Consolidate vignettes one. Clean code, eval examples.","code":""},{"path":"/news/index.html","id":"epidatr-070","dir":"Changelog","previous_headings":"","what":"epidatr 0.7.0","title":"epidatr 0.7.0","text":"Remove temporary code API key transition. Add timeout_seconds return_empty arguments fetch().","code":""},{"path":"/news/index.html","id":"epidatr-060","dir":"Changelog","previous_headings":"","what":"epidatr 0.6.0","title":"epidatr 0.6.0","text":"fetch_{tbl,classic,df,json,csv} functions replaced fetch() function, almost always returns tibble, except used limited number older endpoints (delphi() meta()), output nested list structure.","code":""},{"path":"/news/index.html","id":"epidatr-050","dir":"Changelog","previous_headings":"","what":"epidatr 0.5.0","title":"epidatr 0.5.0","text":"package installs renamed delphi.epidata epidatr. migrate, run installation command , followed remove.packages(\"delphi.epidata\"), adjust references package name accordingly.","code":""}]
